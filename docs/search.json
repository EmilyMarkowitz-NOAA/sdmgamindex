[{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A-gam-basics.html","id":"example-set-up-and-context","dir":"Articles","previous_headings":"","what":"Example set up and context:","title":"Intro to GAMs","text":"example, let’s say want assess: example, use data NOAA Fisheries’ eastern Bering sea (EBS) bottom trawl survey. Resource Assessment Conservation Engineering (RACE) Division Groundfish Assessment Program (GAP) Alaska Fisheries Science Center (AFSC) conducts fisheries-independent bottom trawl surveys assess populations demersal fish crab stocks Alaska. Data presented presence-(non-zero) observations surveys therefore aggregated. sake simple example, assess data 2015 2021.","code":"SPECIES <- c(\"walleye pollock\") YEARS <- 2015:2021 SRVY <- \"EBS\""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A-gam-basics.html","id":"what-data-area-we-using","dir":"Articles","previous_headings":"","what":"1. What data area we using?","title":"Intro to GAMs","text":", use public facing data NOAA AFSC groundfish Bering sea bottom trawl survey. information data compiled, see afsc-gap-products GitHub repo.","code":"dat <- sdmgamindex::noaa_afsc_public_foss %>%    dplyr::filter(srvy == SRVY &                   year %in% YEARS &                   common_name %in% SPECIES) %>%   dplyr::mutate(hauljoin = paste0(stratum, \"_\", station, \"_\", date_time)) %>%   dplyr::select(     year, date_time, latitude_dd, longitude_dd, # spatiotemproal data     cpue_kgha, common_name, # catch data     bottom_temperature_c, depth_m, # possible covariate data     srvy, area_swept_ha, duration_hr, vessel_id, hauljoin # haul/effort data)   )  head(dat)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A-gam-basics.html","id":"prepare-the-data-for-sdmgamindexget_surveyidx","dir":"Articles","previous_headings":"","what":"2. Prepare the data for sdmgamindex::get_surveyidx():","title":"Intro to GAMs","text":"","code":"# project spatial data crs_proj <- \"EPSG:3338\" # NAD83 / Alaska Albers crs_latlon <- \"+proj=longlat +datum=WGS84\" # decimal degrees  ll <- sdmgamindex::convert_crs(    x = dat$longitude_dd,   y = dat$latitude_dd,    crs_in = crs_latlon,    crs_out = crs_proj)   YEARS <- sort(unique(dat$year))  # The sdmgamindex::get_surveyidx() expects some columns to be named in a specific way dat_wrangled <- dat %>%    dplyr::rename(     Year = year,     wCPUE = cpue_kgha,      COMMON_NAME = common_name,     GEAR_TEMPERATURE = bottom_temperature_c,      BOTTOM_DEPTH = depth_m,     HaulDur = duration_hr,     EFFORT = area_swept_ha,     Ship = vessel_id) %>%   dplyr::mutate(      # create some other vars     Lon = longitude_dd,      Lat = latitude_dd,      lon = ll$X,     lat = ll$Y,     sx = ((longitude_dd - mean(longitude_dd, na.rm = TRUE))/1000),     sy = ((latitude_dd - mean(latitude_dd, na.rm = TRUE))/1000),      ctime = as.numeric(as.character(Year)),     date_time = as.Date(x = date_time, format = \"%m/%d/%Y %H:%M:%S\"),      hour = as.numeric(format(date_time,\"%H\")),     minute = as.numeric(format(date_time,\"%M\")),     day = as.numeric(format(date_time,\"%d\")),     month = as.numeric(format(date_time,\"%m\")),     TimeShotHour = hour + minute/60,     timeOfYear = (month - 1) * 1/12 + (day - 1)/365,             # add some dummy vars and create some other vars     Country = \"USA\",     Gear = \"dummy\",     Quarter = \"2\")  %>%   dplyr::mutate(across((c(\"Year\", \"Ship\", \"COMMON_NAME\")), as.factor)) %>%    dplyr::select(wCPUE, GEAR_TEMPERATURE, BOTTOM_DEPTH, COMMON_NAME, EFFORT,                  Year, Ship, Lon, Lat, lat, lon, sx, sy,                  ctime, TimeShotHour, timeOfYear, Gear, Quarter, HaulDur, hauljoin)  head(dat_wrangled)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A-gam-basics.html","id":"define-representitive-station-points-to-fit-and-predict-the-model-at","dir":"Articles","previous_headings":"","what":"3. Define representitive station points to fit and predict the model at","title":"Intro to GAMs","text":"Since surveys done exact location year (’s intention, impossible practice), need define representative latitudes longitudes going predict . prediction grids AFSC uses 2021 VAST model-based indices (subject change - use without asking/checking still current!).","code":"pred_grid <- sdmgamindex::pred_grid_ebs  ll <- sdmgamindex::convert_crs(    x = pred_grid$lon,   y = pred_grid$lat,    crs_in = crs_latlon,    crs_out = crs_proj)   pred_grid <- pred_grid %>%    dplyr::mutate(      lon = ll$X,     lat = ll$Y,     sx = ((lon - mean(lon, na.rm = TRUE))/1000),     sy = ((lat - mean(lat, na.rm = TRUE))/1000))  head(pred_grid)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A-gam-basics.html","id":"prepare-covariate-data","dir":"Articles","previous_headings":"","what":"4. Prepare covariate data","title":"Intro to GAMs","text":"want match covariate data prediction grid.","code":"dat_cov <- sdmgamindex::pred_grid_ebs %>%    dplyr::select(-Shape_Area) %>%    dplyr::mutate(      sx = ((lon - mean(lon, na.rm = TRUE))/1000),     sy = ((lat - mean(lat, na.rm = TRUE))/1000))  sp_extrap_raster <- SpatialPoints(   coords = coordinates(as.matrix(dat_cov[,c(\"lon\", \"lat\")])),    proj4string = CRS(crs_latlon) )"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A-gam-basics.html","id":"a--data-that-varies-over-only-space-depth","dir":"Articles","previous_headings":"4. Prepare covariate data","what":"4a. Data that varies over only space (depth)","title":"Intro to GAMs","text":"Bering sea, depth rarely changes. modeler may consider making variable time-varying well say, Gulf Alaska Aleutian Islands currents island formation can markedly change depth. , going create raster depth Bering sea survey data can merge dataset prediction grid lat/lons.","code":"x <- dat_wrangled %>%   dplyr::select(Lon, Lat, BOTTOM_DEPTH) %>%   stats::na.omit()  %>%    sf::st_as_sf(x = .,                 coords = c(x = \"Lon\", y = \"Lat\"),                 crs = sf::st_crs(crs_latlon))  idw_fit <- gstat::gstat(formula = BOTTOM_DEPTH ~ 1,                         locations = x,                         nmax = 4)  # stn_predict <- raster::predict(idw_fit, x)  extrap_data0 <- raster::predict(   idw_fit, sp_extrap_raster) %>%   # as(sp_extrap_raster, Class = \"SpatialPoints\")) %>%   sf::st_as_sf() %>%   sf::st_transform(crs = crs_latlon)  %>%   stars::st_rasterize()   extrap_data <- stars::st_extract(x = extrap_data0,                                  at = as.matrix(dat_cov[,c(\"lon\", \"lat\")]))  # to make future runs of this faster: save(extrap_data0, extrap_data,       file = paste0(\"../inst/VigA_bottom_depth_raster_\",                    min(YEARS),\"-\",max(YEARS), \".rdata\")) # Just so we can see what we are looking at: plot(extrap_data0, main = \"Interpolated Bottom Depths\")   dat_cov <- cbind.data.frame(dat_cov,                              \"BOTTOM_DEPTH\" = extrap_data$var1.pred) %>%   stats::na.omit()  head(dat_cov)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A-gam-basics.html","id":"b--data-that-varies-over-space-and-time-bottom-temperature","dir":"Articles","previous_headings":"4. Prepare covariate data","what":"4b. Data that varies over space and time (bottom temperature)","title":"Intro to GAMs","text":", bottom temperature, thereby cold pool extent, show drive distribution many species. especially true walleye pollock. going lean -house prepared validated pre-prepared {coldpool} R package (S. Rohan, L. Barnett, N. Charriere). data interpolates whole area survey missing data.","code":"plot(coldpool::ebs_bottom_temperature[[1]]) # Just so we can see what we are looking at:   tmp <- c() for (i in 1:length(YEARS)) {   tmp <- c(tmp,             grep(pattern = YEARS[i], x = names(coldpool::ebs_bottom_temperature))) }  extrap_data0 <- coldpool::ebs_bottom_temperature[[tmp]] %>%    as(., Class = \"SpatialPointsDataFrame\") %>%   sf::st_as_sf() %>%   sf::st_transform(crs = crs_latlon)  %>%   stars::st_rasterize() %>%    stars::st_extract(x = .,                     at = as.matrix(dat_cov[,c(\"lon\", \"lat\")]))  names(extrap_data0) <- paste0(\"GEAR_TEMPERATURE\", YEARS)  dat_cov <- dplyr::bind_cols(dat_cov, extrap_data0) %>%    na.omit()  head(dat_cov)"},{"path":[]},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A-gam-basics.html","id":"a--catch-data","dir":"Articles","previous_headings":"5. DATRAS structure","what":"5a. Catch Data","title":"Intro to GAMs","text":"Now, need fill data zeros!","code":"# Identify vars that will be used --------------------------------------------  varsbyyr <- unique( # c(\"GEAR_TEMPERATURE\", \"cpi\")   gsub(pattern = \"[0-9]+\",         replacement = \"\",         x = names(dat_cov)[grepl(names(dat_cov),                                  pattern = \"[0-9]+\")]))  vars <- unique( # c(\"BOTTOM_DEPTH\")   names(dat_cov)[!grepl(names(dat_cov),                          pattern = \"[0-9]+\")]) vars <- vars[!(vars %in% c(\"LONG\", \"LAT\", \"lon\", \"lat\", \"sx\", \"sy\"))]  ## Fill catch data with zeros ---------------------------------------------------------  data_hauls <- dat_wrangled %>%    dplyr::select(Year, sx, sy,                  dplyr::all_of(varsbyyr), dplyr::all_of(vars),                  Ship, hauljoin,                  lat, lon, Lat, Lon,                  ctime, TimeShotHour, timeOfYear, Gear, Quarter,                  EFFORT, HaulDur)  %>%    # dplyr::filter(!is.na(GEAR_TEMPERATURE)) %>%    na.omit() %>%   dplyr::distinct()  data_catch <- dat_wrangled %>%    dplyr::select(COMMON_NAME, wCPUE, hauljoin)  dat_catch_haul <- dplyr::left_join(x = data_hauls,                                     y = data_catch,                                     by = c(\"hauljoin\")) %>%    dplyr::mutate(wCPUE = ifelse(is.na(wCPUE), 0, wCPUE))  head(dat_catch_haul) allpd <- lapply(YEARS, FUN = sdmgamindex::get_prediction_grid, x = dat_cov,                  vars = vars, varsbyyr = varsbyyr) names(allpd) <- as.character(YEARS)  head(allpd[1][[1]])"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A-gam-basics.html","id":"b--covariate-data","dir":"Articles","previous_headings":"5. DATRAS structure","what":"5b. Covariate Data","title":"Intro to GAMs","text":"","code":"## split data by species, make into DATRASraw + Nage matrix ds <- split(dat_catch_haul,dat_catch_haul$COMMON_NAME) ds <- lapply(ds, sdmgamindex::get_datrasraw) ## OBS, response is added here in \"Nage\" matrix -- use wCPUE ds <- lapply(ds,function(x) { x[[2]]$Nage <- matrix(x$wCPUE,ncol=1); colnames(x[[2]]$Nage)<-1; x } )  ds"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A-gam-basics.html","id":"formulas","dir":"Articles","previous_headings":"","what":"6. Formulas","title":"Intro to GAMs","text":"","code":"fm <-  list(   # Null model spatial and temporal with an additional year effect     \"fm_0_s\" = \"Year +     s(sx,sy,bs=c('ts'),k=376)\",            \"fm_0_s\" = \"Year +     s(Year,bs=c('ts'),k=10)\",            \"fm_0_st\" = \"Year +     s(sx,sy,bs=c('ts'),k=10,by=Year)\",      \"fm_1_s_t_st\" = \"Year +     s(sx,sy,bs=c('ts'),k=376) +     s(sx,sy,bs=c('ts'),k=10,by=Year)\",    # Model with simple covariates   \"fm_2_cov\" =     \"s(BOTTOM_DEPTH,bs='ts',k=10) + s(log(GEAR_TEMPERATURE+3),bs='ts',k=10)\" )"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A-gam-basics.html","id":"fit-the-model","dir":"Articles","previous_headings":"","what":"7. Fit the Model","title":"Intro to GAMs","text":"models want try fitting:","code":"comb <- tidyr::crossing(   \"SPECIES\" = SPECIES,    \"fm_name\" = gsub(pattern = \" \", replacement = \"_\", x = names(fm))) %>%    dplyr::left_join(     x = .,      y = data.frame(\"fm\" = gsub(pattern = \"\\n\", replacement = \"\",                                 x = unlist(fm), fixed = TRUE),                     \"fm_name\" = gsub(pattern = \" \", replacement = \"_\",                                      x = names(fm))),      by = \"fm_name\")  comb models <- fittimes <- list()  for(i in 1:nrow(comb)){   cat(\"Fitting \",comb$SPECIES[i],\"\\n\", comb$fm_name[i], \": \", comb$fm[i], \"\\n\")      temp <- paste0(comb$SPECIES[i], \" \", comb$fm_name[i])      fittimes[[ temp ]] <-     system.time ( models[[ temp ]] <-                       mgcv::gam(stats::as.formula(paste0(\"wCPUE ~ \", comb$fm[i])),       dat = dat_wrangled,        family = mgcv::tw,        gamma = 1)  ) }    save(models, fittimes, file = paste0(\"../inst/VigA_simple_gam_model_fits.Rdata\")) # Lesson 8: Modling # Created by: Emily Markowitz # Contact: Emily.Markowitz@noaa.gov # Created: 2020-12-18 # Modified: 2021-02-17   # tasks -------------------------------------------------------------------  # Be creative!  # Make a lm(), glm(), and gam() using either of these datasets to answer a  # question you have about the data. Be prepared to share your cool code with  # the class!     # 3. lm() models ---------------   # Quickly, I am going to show you all of the combinations using the purrr::map() again:  lm_mods <- map(dat, ~lm(dat$wtcpue ~ .x, data = dat) %>%                   broom::tidy())  lm_mods  # The best model looks to be the one with longitude!  # Another way of looking at this:  # p-values dat %>%    map(~lm(dat$wtcpue ~ .x, data = dat)) %>%    map(summary) %>%    map(c(\"coefficients\")) %>%    map_dbl(8)  # r2 dat %>%    map(~lm(dat$wtcpue ~ .x, data = dat)) %>%    map(summary) %>%    map(c(\"r.squared\")) %>%   unlist()  # 4. glm() models ---------------   glm_fit1 <- glm(wtcpue ~ longitude,                  family = gaussian(link = \"identity\"), # same as an lm()                 # family = \"gaussian\", # *same as line above                 data = dat)  glm_fit2 <- glm(wtcpue ~ longitude,                  family = Gamma(),                  data = dat)  glm_fit3 <- glm(wtcpue ~ longitude + latitude,                  family = gaussian(link = \"identity\"), # same as an lm()                 # family = \"gaussian\", # *same as line above                 data = dat)  glm_fit4 <- glm(wtcpue ~ longitude + latitude,                  family = Gamma(),                  data = dat)  glm_fit5 <- glm(wtcpue ~ longitude + latitude + year,                  family = gaussian(link = \"identity\"), # same as an lm()                 # family = \"gaussian\", # *same as line above                 data = dat)  glm_fit6 <- glm(wtcpue ~ longitude + latitude + year,                  family = Gamma(),                  data = dat)  glm_fit7 <- glm(wtcpue ~ longitude + latitude + year + bot_temp,                  family = gaussian(link = \"identity\"), # same as an lm()                 # family = \"gaussian\", # *same as line above                 data = dat)  glm_fit8 <- glm(wtcpue ~ longitude + latitude + year + bot_temp,                  family = Gamma(),                  data = dat)  AIC(glm_fit1, glm_fit2, glm_fit3, glm_fit4,      glm_fit5, glm_fit6, glm_fit7, glm_fit8) # Model 6 has the lowest AIC and is the most parsimonious! # bot_temp did not improve the model at all here, so why include it? # AIC is not the only metric to consider here, but I'll let you read up on that! # we can see that this model has room for improvement from looking at the plots:  plot(glm_fit6)  # Now let's predict our outputs  # make up x pred<-data.frame(\"longitude\" = rnorm(n = 30,                                       mean = mean(dat$longitude),                                       sd = sd(dat$longitude)),                   \"latitude\" = rnorm(n = 30,                                      mean = mean(dat$latitude),                                      sd = sd(dat$latitude)),                   \"year\" = rep_len(x = c(2016, 2017, 2018),                                    length.out = 10)) # predict y with your equation pred$x<-predict(object = glm_fit6,                  newdata = pred,                  type = \"response\") pred  # 5. gam() models ---------------   library(mgcv)  # Create our gam models gam_fit1 <- gam(   wtcpue ~ s(longitude),    data = dat )  gam_fit2 <- gam(   wtcpue ~ s(longitude),   family = Gamma(link=log),    data = dat )  gam_fit3 <- gam(   wtcpue ~ s(longitude) + s(latitude),   data = dat )  gam_fit4 <- gam(   wtcpue ~ s(longitude) + s(latitude),   family = Gamma(link=log),    data = dat )  gam_fit5 <- gam(   wtcpue ~ s(longitude) + s(latitude) + s(year, k = 2),   data = dat )  gam_fit6 <- gam(   wtcpue ~ s(longitude) + s(latitude) + s(year, k = 2),   family = Gamma(link=log),    data = dat )   gam_fit7 <- gam(   wtcpue ~ s(longitude, latitude, year),   data = dat )  gam_fit8 <- gam(   wtcpue ~ s(longitude, latitude, year),    family = Gamma(link=log),    data = dat )   AIC(gam_fit1, gam_fit2, gam_fit3, gam_fit4,      gam_fit5, gam_fit6, gam_fit7, gam_fit8) # Model 8 has the lowest AIC!  # by explicityly making a spatio-temporal term (as opposed to assessing  # each sepeately) we were able to obtain a better model # Again, AIC is not the only metric to consider here, but I'll let you read up on that!   # crazy, just for giggles (aka an abridged model I am playing with in real life!) gam_fit9 <- gam(   wtcpue ~ year + # a linear variable     s(longitude, latitude, bs = c('ts'), k = 379) + # ts = tensor spline, k = knots, here the number of stations (?)     s(longitude, latitude,bs=c('ts'),k=50, by=year, id=1), # the above but with a by year term   family = Gamma(link=log),    data = dat )  # Will this more developed model be better than our gam_fit8? AIC(gam_fit8, gam_fit9) # Our new gam_fit9 is just that much better than our gam_fit8! AIC(models$`walleye pollock fm_1_s_t_st`$pModels[[1]],      models$`walleye pollock fm_2_cov`$pModels[[1]]) par(mfrow = c(2,2)) lapply(models,function(x) gam.check(x$pModels[[1]])) lapply(models,function(x) summary(x$pModels[[1]]))"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A-gam-basics.html","id":"indicies-of-abundance","dir":"Articles","previous_headings":"","what":"8. Indicies of Abundance","title":"Intro to GAMs","text":"","code":"dat_design <- dplyr::bind_rows(read.csv(file = system.file(\"YFS_10210_estimate_summary.csv\",                          package = \"sdmgamindex\" )) %>%                            dplyr::mutate(common_name = \"yellowfin sole\"),                  read.csv(file = system.file(\"WEP_21740_estimate_summary.csv\",                          package = \"sdmgamindex\" ))  %>%                            dplyr::mutate(common_name = \"walleye pollock\"),                   read.csv(file = system.file(\"RKC_Table_for_SS3.csv\",                          package = \"sdmgamindex\" )) %>%    dplyr::rename(design_mt = Estimate_metric_tons,                  design_se = SD_mt) %>%    dplyr::mutate(design_se = (design_se)^2,                  design_CV = NA,                  VAST_mt = NA,                 VAST_se = NA,                  VAST_CV = NA,                  common_name = \"red king crab\") %>%    dplyr::select(-Unit, -Fleet, -SD_log))    dat <- data.frame() for (i in 1:length(models)){   temp <- models[[i]]   dat0 <- data.frame(idx = temp$idx[,1],                       lo = temp$lo[,1],                       up = temp$up[,1],                      Year = rownames(temp$idx),                       group = names(models)[i],                      formula = paste0(\"cpue_kgha ~ \",                                        as.character(temp$pModels[[1]]$formula)[[3]]))      dat <- dplyr::bind_rows(dat, dat0)  }  dat$common_name <- paste0(sapply(X = strsplit(x = dat$group, split = \" fm\"), `[`, 1))  dat <- dplyr::bind_rows(dat %>%                            dplyr::mutate(Year = as.numeric(Year)) %>%                            dplyr::select(-group),                          dat_design %>%                            dplyr::select(design_mt, common_name, Year) %>%                           dplyr::rename(idx = design_mt) %>%                           dplyr::mutate(lo = NA,                                          up = NA,                                          formula = \"design\")) %>%    dplyr::filter(Year %in% YEARS)     dat[dat$Year == 2020, c(\"idx\", \"up\", \"lo\")] <- NA  ggplot2::ggplot(data = dat,                  mapping = aes(x = Year,                                y = idx,                                group = formula,                                color = formula)) +   geom_line(size = 1.5) +    geom_point(size = 2)  +    geom_ribbon(aes(ymin = lo, ymax = up, fill = formula),                alpha=0.1,                linetype=\"dashed\",               color=\"grey\") +    ggtitle(\"Annual Index Model Results\") +   facet_wrap(vars(common_name), scales = \"free\", ncol = 1) +   theme(legend.position = \"bottom\",          legend.direction = \"vertical\")"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A-gam-basics.html","id":"predict-and-plot","dir":"Articles","previous_headings":"","what":"9. Predict and plot","title":"Intro to GAMs","text":"","code":"dat_pred <- dat_catch_haul %>%   dplyr::select(Year, sx, sy, Lon, Lat, GEAR_TEMPERATURE, BOTTOM_DEPTH)  dat <- data.frame() for (i in 1:length(models)) {   temp <- models[[i]]   dat0 <- data.frame(idx =                   predict.gam(                    object = temp$pModels[[1]],                    newdata = dat_pred),                        group = names(models)[i],                       formula = paste0(\"cpue_kgha ~ \",                                        as.character(temp$pModels[[1]]$formula)[[3]])                )   dat00 <- dplyr::bind_cols(dat0, dat_pred)    dat <- dplyr::bind_rows(dat, dat00)     # dat_r <- raster::rasterFromXYZ(xyz = dat00[,c(\"lon\", \"lat\", \"idx\")])      }  dat$facet_group <- paste0(sapply(X = strsplit(x = dat$group, split = \" fm\"), `[`, 1))  for (i in 1:length(unique(dat$facet_group))){      ggplot2::ggplot(data = dat %>%                    dplyr::filter(facet_group == unique(dat$facet_group)[i]),                  mapping = aes(x = Lon,                                y = Lat,                                group = group,                                color = idx)) +     scale_color_viridis_c(option = \"D\") +   geom_point()  +    ggtitle(paste0(\"Annual Index Model Results for \", unique(dat$facet_group)[i])) +   facet_grid(cols = vars(group),               rows = vars(Year)) +   theme_bw()    } sdmgamindex::plot_surveyidx(   x = models,    dat = ds,    myids = NULL,    predD = allpd)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A-gam-basics.html","id":"simulations","dir":"Articles","previous_headings":"","what":"10. Simulations","title":"Intro to GAMs","text":"","code":"REPS <- 4 ests <- list()  for(i in 1:nrow(comb)){    cat(\"Simulating \",comb$SPECIES[i],\"\\n\", comb$fm_name[i], \": \", comb$fm[i], \"\\n\")   temp <- paste0(comb$SPECIES[i], \" \", comb$fm_name[i])  # for(SPECIES in specLevels){   ests[[ temp ]] <- list()      ## simulate data   csim <- sdmgamindex::get_surveyidx_sim(models[[i]], ds[[comb$SPECIES[i]]])   sims <-lapply(1:REPS,function(j) sdmgamindex::get_surveyidx_sim(     model = models[[i]],     d = ds[[comb$SPECIES[i]]],      sampleFit = FALSE,     condSim = csim) )      ## re-estimate   tmp <- ds[[i]]   for(i in 1:REPS) {     tmp[[2]]$Nage <- matrix(sims[[i]][[1]][,1],ncol=1)     colnames(tmp$Nage)<-1          ests[[SPECIES]][[i]]  <-       sdmgamindex::get_surveyidx(         x = tmp,         ages = 1,         myids=NULL,         predD=allpd,         cutOff=0,         fam=\"Tweedie\",         modelP=fm,         gamma=1,         control=list(trace=TRUE,maxit=10))     # cat(i, \" done.\\n\")   }    }  png(\"simest.png\",width=640*pngscal,height=480*pngscal) par(mfrow=c(2,2))  for(i in 1:nrow(comb)){  # for(SPECIES in specLevels){   sdmgamindex::plot_simulation_list(     x = ests[[temp]],     base=models[[temp]],     main=temp,     lwd=2) } dev.off()"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A_gam_sdmTMB_example.html","id":"goals-of-the-original-exercise","dir":"Articles","previous_headings":"","what":"Goals of the original exercise:","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Practice fitting basic spatiotemporal model. Understand inspect model output. Practice predicting model new data making visualizations predictions. Gain familiarity fitting, comparing interpreting different random field structures. Calculate area-weighted biomass index compare model structure can impact index.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A_gam_sdmTMB_example.html","id":"our-goals-for-this-vignette","dir":"Articles","previous_headings":"","what":"Our goals for this vignette:","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Fit GAM obtain area-weighted biomass index Fit basic spatiotemporal model (GLMM!) using sdmTMB compare GAM GLMM Check system:","code":"PKG <- c(   \"sdmTMB\", # install.packages(\"sdmTMB\", dependencies = TRUE)   \"mgcv\",    \"gratia\",   \"visreg\",    \"gstat\",   \"dplyr\",    \"ggplot2\",    \"INLA\",   \"prediction\",   \"inlabru\",    \"purrr\")  for (p in PKG) {   if(!require(p,character.only = TRUE)) {       install.packages(p)     require(p,character.only = TRUE)} }  options(ggplot2.continuous.colour = \"viridis\") options(ggplot2.continuous.fill = \"viridis\") theme_set(theme_light()) sessionInfo()"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A_gam_sdmTMB_example.html","id":"the-data","dir":"Articles","previous_headings":"","what":"The data","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"work CPUE data yellowfin sole Eastern Bering Sea summer bottom trawl survey. data publicly available FOSS. dataset contains sampling locations (longitude latitude) year. also contains sampling depth meters sample CPUE density units tonnes/km2.","code":"ggplot(data = dat,         mapping = aes(x = longitude_dd, y = latitude_dd, size = cpue_kgha, color = bottom_temperature_c)) +    geom_point(alpha = 0.3)"},{"path":[]},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A_gam_sdmTMB_example.html","id":"add-utm-columns-log-depth-and-year-as-factor","dir":"Articles","previous_headings":"Fit a GAM to spatial data (analogous to spatial-only model in sdmTMB)","what":"Add UTM columns, log depth, and year as factor","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"","code":"dat <- add_utm_columns(dat,                         ll_crs = 4326,                        ll_names = c(\"longitude_dd\", \"latitude_dd\"))  dat$log_depth <- log(dat$depth_m) dat$year_factor <- as.factor(dat$year)  dat[,c(\"X\",\"Y\")] range(dat$X) range(dat$Y)  ggplot(dat, aes(X, Y, size = cpue_kgkm2)) +   geom_point(shape = 21) +   coord_fixed()"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A_gam_sdmTMB_example.html","id":"temporal-effect-plus-spatial-smoother-no-covariates","dir":"Articles","previous_headings":"Fit a GAM to spatial data (analogous to spatial-only model in sdmTMB)","what":"Temporal effect plus spatial smoother, no covariates","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"First, fit GAM without covariates: just year factor spatial smoother \\(s(X,Y)\\). .factor(year) part common component SDMs used generate indices. Get diagnostics perform model checking: Include 2-D smooth space, depth covariate.","code":"start.time <- Sys.time() fit_gam <- gam(   formula = cpue_kgha ~ as.factor(year) +     s(X, Y, k = 50),   family = tw(link = \"log\"),   data = dat )  cat(   \"The GAM took \",   difftime(Sys.time(), start.time, units = \"mins\"),   \" mins to run\" ) gam.check(fit_gam) start.time <- Sys.time() fit_gam_s <- gam(   formula = cpue_kgha ~ s(depth_m) + as.factor(year) +      s(X,Y),    family = tw(link = \"log\"),   data = dat )  cat(\"The GAM took \",      difftime(Sys.time(),start.time, units = \"mins\"),      \"mins to run\")  gam.check(fit_gam_s)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A_gam_sdmTMB_example.html","id":"fit-a-gam-analogous-to-a-spatiotemporal-model-in-sdmtmb","dir":"Articles","previous_headings":"","what":"Fit a GAM analogous to a spatiotemporal model in sdmTMB","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"NOTE: takes long time fit. Include 2-D smooth space year. case, different 2-D smooth year. take much longer fit two. Get diagnostics perform model checking Review console output help verify convergence, whether adequate number basis functions (k). Examine four diagnostic plots. gives different way looking model residuals. top-left Q-Q plot, compares model residuals expected/assumed distribution family. well-fit model’s residuals close 1-1 line, otherwise may - -dispersion present. bottom left histogram residuals. want shape similar distribution family specified. top-right plot residual values function linear predictor. evenly distributed around zero well-fitted model. Finally, bottom-right plot response fitted values. well-fitted model show values near 1-1 line.","code":"start.time <- Sys.time()  fit_gam_st <- gam(   formula = count ~ as.factor(year) +     s(X, Y, by = as.factor(year)),   family = tw(link = \"log\"),   data = dat )  cat(   \"The GAM took \",   difftime(Sys.time(), start.time, units = \"mins\"),   \"mins to run\" ) gam.check(fit_gam_st)"},{"path":[]},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A_gam_sdmTMB_example.html","id":"load-the-grid","dir":"Articles","previous_headings":"Predict to full survey area with new data","what":"Load the grid","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Extrapolation grid EBS. spatiotemporal data, need grid year. nice tidy little chunk purrr code !","code":"# This is another form of the same grid: load(here::here(\"data/pred_grid_ebs.rda\")) # object: pred_grid_ebs #pred_grid_ebs <- read.csv(here::here(\"data/ebs_2022_epsg3338.csv\"),header = TRUE)  get_crs(dat = pred_grid_ebs,ll_names =c(\"lon\",\"lat\"))  grid <- add_utm_columns(pred_grid_ebs,                         #ll_crs = 32603,                         ll_names = c(\"lon\", \"lat\")) range(grid$X)  # Grid from example #wcvi_grid <- readRDS(here::here(\"data/wcvi-grid.rds\")) grid <- purrr::map_dfr(unique(dat$year), ~ tibble(grid, year = .x))"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A_gam_sdmTMB_example.html","id":"predict-cpue-across-the-grid","dir":"Articles","previous_headings":"Predict to full survey area with new data","what":"Predict CPUE across the grid","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"get predicted Plot predictions survey area. Note: EBS grid irregularly spaced, use geom_point() instead geom_tile() geom_raster().","code":"pred_gam <- predict(fit_gam, type = \"response\", newdata = grid) #This takes a long time. pred_gam_df <- cbind(grid, pred_gam) pred_gam_df$Shape_Area_ha <- pred_gam_df$Shape_Area*0.0001 # original Shape_area is in m^2 pred_gam_df$predicted_tot_grid <- pred_gam_df$Shape_Area_ha*pred_gam_df$pred_gam pred_gam_df |>   filter(year==1999) |> # single year  ggplot(aes(X, Y, color=pred_gam)) +    geom_point(size = 0.1) +    scale_fill_viridis_c() +    #facet_wrap(~year) +    coord_fixed() +   labs(color = expression(CPUE (kg/km^2))) +   theme_light() +   theme(legend.position = \"bottom\")"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A_gam_sdmTMB_example.html","id":"calculate-biomass-index-from-gam-via-simulation","dir":"Articles","previous_headings":"","what":"Calculate biomass index from GAM via simulation","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Generally, model-based indices abundance use area grid cell prediction area calculate total index across survey area. simplest way sum predicted biomasses across full grid like :","code":"gam_idx_mt <- pred_gam_df |>    dplyr::group_by(year) |>    summarize(total_wt_mt = sum(predicted_tot_grid)/1000)  head(gam_idx_mt)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A_gam_sdmTMB_example.html","id":"get-uncertainties-for-gam-based-index-by-sampling-from-posteriors","dir":"Articles","previous_headings":"Calculate biomass index from GAM via simulation","what":"Get uncertainties for GAM-based index by sampling from posteriors","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"{gratia} R package evaluating displaying GAM fits. script uses fitted_samples() function, draws fitted values posterior model using Gaussian approximation.","code":"sims <- gratia::fitted_samples(fit_gam, n=10, data=grid,                                 scale=\"response\", seed=9) sims$year <- grid$year[sims$row] sims$area <- rep(pred_gam_df$Shape_Area_ha, times = 10) # matching the # of draws sims$biomass <- sims$fitted * sims$area # expand from density to biomass, given area  level <- 0.95 # specify probability for confidence interval  # Get sum of simulated biomass (density*area) across grid cells, with CI lwr_fn <- function(x) {as.numeric(quantile(x, probs = (1 - level) / 2))} upr_fn <- function(x) {as.numeric(quantile(x, probs = 1 - (1 - level) / 2))}  sims_sum <-  sims %>%    group_by(year,draw) %>%    summarise_at(\"biomass\", list(biomass = sum)) %>%   group_by(year) %>%   summarise_at(\"biomass\", list(est = median, # could use mean                            lwr = lwr_fn,                            upr = upr_fn))"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A_gam_sdmTMB_example.html","id":"index-standardization-using-sdmtmb","dir":"Articles","previous_headings":"","what":"Index standardization using sdmTMB","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"calculate index models, need run predict.sdmTMB() function argument return_tmb_object = TRUE. can run get_index() function extract total biomass calculations standard errors. can set area argument cell_area column km2. case value 4 km2 cells, since grid cells 2 km x 2 km. grid cells fully survey domain (land), feed vector grid areas area argument matched number grid cells. density units tonnes per km2 data, index tonnes. used bias_correction = FALSE speed things , final result want use bias correction. Let’s see much scale index changes bias correction.","code":"p <- predict(fit, newdata = grid, return_tmb_object = TRUE) index <- get_index(p, area = grid$cell_area, bias_correct = FALSE)  ggplot(index, aes(year, est)) +   geom_line() +   geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.4) +   xlab(\"Year\") +   ylab(\"Biomass estimate (tonnes)\") index_c <- get_index(p, area = grid$cell_area, bias_correct = TRUE) index_c$Method <- \"Bias correction\"  bind_rows(index, index_c) %>%   ggplot(aes(year, est, fill = Method)) +   geom_line(aes(colour = Method)) +   geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.4) +   xlab(\"Year\") +   ylab(\"Biomass estimate (tonnes)\")"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/A_gam_sdmTMB_example.html","id":"calculate-biomass-index-from-gam-via-simulation-1","dir":"Articles","previous_headings":"","what":"Calculate biomass index from GAM via simulation","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Note approach uses Gaussian approximation posterior, implemented currently gratia package. However, better estimate uncertainty derived sampling actual posterior distribution. However, beyond scope today’s lesson. Plot biomass index:","code":"sims <- gratia::fitted_samples(fit_gam, n=10, newdata=grid,                                 scale=\"response\", seed=9) sims$year <- grid$year[sims$row] sims$biomass <- sims$fitted * 4 # expand from density to biomass, given area  level <- 0.95 # specify probability for confidence interval  # Get sum of simulated biomass (density*area) across grid cells, with CI lwr_fn <- function(x) {as.numeric(quantile(x, probs = (1 - level) / 2))} upr_fn <- function(x) {as.numeric(quantile(x, probs = 1 - (1 - level) / 2))}  sims_sum <-  sims %>%    group_by(year,draw) %>%    summarise_at(\"biomass\", list(biomass = sum)) %>%   group_by(year) %>%   summarise_at(\"biomass\", list(est = median, # could use mean                            lwr = lwr_fn,                            upr = upr_fn)) ggplot(sims_sum, aes(year, est)) + geom_line() +   geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.4) +   xlab('Year') + ylab('Biomass estimate (kg)')"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B-gam-sdmTMB-example.html","id":"goals-of-the-original-exercise","dir":"Articles","previous_headings":"","what":"Goals of the original exercise","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Practice fitting basic spatiotemporal model. Understand inspect model output. Practice predicting model new data making visualizations predictions. Gain familiarity fitting, comparing interpreting different random field structures. Calculate area-weighted biomass index compare model structure can impact index.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B-gam-sdmTMB-example.html","id":"our-goals-for-this-vignette","dir":"Articles","previous_headings":"","what":"Our goals for this vignette:","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Fit GAM obtain area-weighted biomass index Fit basic spatiotemporal model (GLMM!) using sdmTMB compare GAM GLMM Check system:","code":"PKG <- c(   \"sdmTMB\", # install.packages(\"sdmTMB\", dependencies = TRUE)   \"mgcv\",    \"gratia\",   \"visreg\",    \"gstat\",   \"dplyr\",    \"ggplot2\",    \"INLA\",   \"prediction\",   \"inlabru\",    \"purrr\")  for (p in PKG) {   if(!require(p,character.only = TRUE)) {       install.packages(p)     require(p,character.only = TRUE)} }  options(ggplot2.continuous.colour = \"viridis\") options(ggplot2.continuous.fill = \"viridis\") theme_set(theme_light()) sessionInfo()"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B-gam-sdmTMB-example.html","id":"the-data","dir":"Articles","previous_headings":"","what":"The data","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"work CPUE data yellowfin sole Eastern Bering Sea summer bottom trawl survey. data publicly available FOSS.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B-gam-sdmTMB-example.html","id":"add-utm-columns-log-depth-and-year-as-factor","dir":"Articles","previous_headings":"The data","what":"Add UTM columns, log depth, and year as factor","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"dataset contains sampling locations (longitude latitude) year. also contains sampling depth meters sample CPUE density units tonnes/km2. ggplot(data = dat,         mapping = aes(x = longitude_dd_start, y = latitude_dd_start,                       size = cpue_kgkm2, color = bottom_temperature_c)) +    geom_point(alpha = 0.3)","code":"dat <- add_utm_columns(dat,                         ll_crs = 4326,                        ll_names = c(\"longitude_dd_start\", \"latitude_dd_start\"))  dat$log_depth <- log(dat$depth_m) dat$year_factor <- as.factor(dat$year)  dat[,c(\"X\",\"Y\")] range(dat$X) range(dat$Y)  ggplot(dat, aes(X, Y, size = cpue_kgkm2)) +   geom_point(shape = 21) +   coord_fixed() ggplot(data = dat,         mapping = aes(x = longitude_dd_start, y = latitude_dd_start,                       size = cpue_kgkm2, color = bottom_temperature_c)) +    geom_point(alpha = 0.3)"},{"path":[]},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B-gam-sdmTMB-example.html","id":"load-the-grid","dir":"Articles","previous_headings":"The prediction grid The data","what":"Load the grid","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Extrapolation grid EBS. Ignore warnings UTM zones– ’s Bering Sea thing.","code":"# This is another form of the same grid: load(here::here(\"data/pred_grid_ebs.rda\")) # object: pred_grid_ebs #pred_grid_ebs <- read.csv(here::here(\"data/ebs_2022_epsg3338.csv\"),header = TRUE)  get_crs(dat = pred_grid_ebs,ll_names =c(\"lon\",\"lat\"))  grid <- add_utm_columns(pred_grid_ebs,                         #ll_crs = 32603,                         ll_names = c(\"lon\", \"lat\")) grid$area_swept_km2 <- 1 # if you have area swept in your model as an offset (common when you're using CPUE data) you can do this (I think)  range(grid$X)  grid$Shape_Area_ha <- grid$Shape_Area*0.0001 # original Shape_area is in m^2"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B-gam-sdmTMB-example.html","id":"replicate-the-grid-for-each-year","dir":"Articles","previous_headings":"The prediction grid The data","what":"Replicate the grid for each year","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"spatiotemporal data, need grid year. nice tidy little chunk purrr code !","code":"grid <- purrr::map_dfr(unique(dat$year), ~ tibble(grid, year = .x))"},{"path":[]},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B-gam-sdmTMB-example.html","id":"temporal-effect-plus-spatial-smoother-no-covariates","dir":"Articles","previous_headings":"Fit a GAM to spatial data (analogous to spatial-only model in sdmTMB) The data","what":"Temporal effect plus spatial smoother, no covariates","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"First, fit GAM without covariates: just year factor spatial smoother \\(s(X,Y)\\). .factor(year) part common component SDMs used generate indices. Get diagnostics perform model checking: Include 2-D smooth space, depth covariate.","code":"start.time <- Sys.time() fit_gam <- gam(   formula = cpue_kgkm2 ~ as.factor(year) +     s(X, Y, k = 50),   family = tw(link = \"log\"),   data = dat )  cat(   \"The GAM took \",   difftime(Sys.time(), start.time, units = \"mins\"),   \" mins to run\" ) gam.check(fit_gam) start.time <- Sys.time() fit_gam_s <- gam(   formula = cpue_kgkm2 ~ s(depth_m) + as.factor(year) +      s(X,Y),    family = tw(link = \"log\"),   data = dat )  cat(\"The GAM took \",      difftime(Sys.time(),start.time, units = \"mins\"),      \"mins to run\")  gam.check(fit_gam_s)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B-gam-sdmTMB-example.html","id":"spatiotemporal-effect","dir":"Articles","previous_headings":"Fit a GAM to spatial data (analogous to spatial-only model in sdmTMB) The data","what":"Spatiotemporal effect","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"NOTE: takes long time fit. Include 2-D smooth space year. case, different 2-D smooth year. take much longer fit two (model takes 10-15 mins - set cache=TRUE chunk outputs saved can used next time doc run). model also includes area swept offset. Get diagnostics perform model checking: Review console output help verify convergence, whether adequate number basis functions (k). compare gam.check() results GAM spatiotemporal effects, can see Q-Q plot closer line. Examine four diagnostic plots. gives different way looking model residuals. top-left Q-Q plot, compares model residuals expected/assumed distribution family. well-fit model’s residuals close 1-1 line, otherwise may - -dispersion present. bottom left histogram residuals. want shape similar distribution family specified. top-right plot residual values function linear predictor. evenly distributed around zero well-fitted model. Finally, bottom-right plot response fitted values. well-fitted model show values near 1-1 line.","code":"start.time <- Sys.time()  fit_gam_st <- gam(   formula = count ~ as.factor(year) +  s(X, Y) +     s(X, Y, by = as.factor(year)) + offset(area_swept_km2),   family = tw(link = \"log\"),   data = dat )  cat(   \"The GAM took \",   difftime(Sys.time(), start.time, units = \"mins\"),   \"mins to run\" ) gam.check(fit_gam_st)  # To save the k' values, edf, k-index, and p-value: qq.gam(fit_gam_st, rep = 0, level = 0.9, rl.col = 2,         rep.col = \"gray80\")"},{"path":[]},{"path":[]},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B-gam-sdmTMB-example.html","id":"predict-cpue-across-the-grid","dir":"Articles","previous_headings":"Calculate biomass index from GAM via simulation The data > Predict to full survey area with new data","what":"Predict CPUE across the grid","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"get predicted CPUE across survey grid. can use models , long YEAR factor long covariates also grid. use basic model (fit_gam) grid contain depth. Plot predictions survey area. Note: EBS grid irregularly spaced, use geom_point() instead geom_tile() geom_raster().","code":"pred_gam <- predict(fit_gam, type = \"response\", newdata = grid) #This takes a long time pred_gam_df <- cbind(grid, pred_gam) pred_gam_df$predicted_tot_grid <- pred_gam_df$Shape_Area_ha*pred_gam_df$pred_gam pred_gam_df |>   dplyr::filter(year == 2019) |> # single year   ggplot(aes(X, Y, color = pred_gam)) +   geom_point(size = 0.1) +   scale_fill_viridis_c() +   # facet_wrap(~year) +   coord_fixed() +   labs(color = expression(CPUE(kg / km^2))) +   theme_light() +   theme(legend.position = \"bottom\")"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B-gam-sdmTMB-example.html","id":"calculate-index","dir":"Articles","previous_headings":"Calculate biomass index from GAM via simulation The data","what":"Calculate index","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Generally, model-based indices abundance use area grid cell prediction area calculate total index across survey area. simplest way sum predicted biomasses across full grid like :","code":"gam_idx_mt <- pred_gam_df |>    dplyr::group_by(year) |>    summarize(total_wt_mt = sum(predicted_tot_grid)/1000)  head(gam_idx_mt)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B-gam-sdmTMB-example.html","id":"get-uncertainties-for-gam-based-index-by-sampling-from-posteriors","dir":"Articles","previous_headings":"Calculate biomass index from GAM via simulation The data","what":"Get uncertainties for GAM-based index by sampling from posteriors","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"{gratia} R package evaluating displaying GAM fits. script uses fitted_samples() function, draws fitted values posterior model using Gaussian approximation. also take .","code":"sims <- gratia::fitted_samples(fit_gam, n=10, data=grid,                                 scale=\"response\", seed=9) sims$year <- grid$year[sims$row] sims$area <- rep(pred_gam_df$Shape_Area_ha, times = 10) # matching the # of draws sims$biomass <- sims$fitted * sims$area # expand from density to biomass, given area  level <- 0.95 # specify probability for confidence interval  # Get sum of simulated biomass (density*area) across grid cells, with CI lwr_fn <- function(x) {as.numeric(quantile(x, probs = (1 - level) / 2))} upr_fn <- function(x) {as.numeric(quantile(x, probs = 1 - (1 - level) / 2))}  sims_sum <- sims %>%    group_by(year, draw) %>%    summarise_at(\"biomass\", list(biomass = sum)) %>%   group_by(year) %>%   summarise_at(\"biomass\", list(est = median, # could use mean                            lwr = lwr_fn,                            upr = upr_fn))"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B-gam-sdmTMB-example.html","id":"plot-the-index","dir":"Articles","previous_headings":"Calculate biomass index from GAM via simulation The data","what":"Plot the index","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Now can plot GAM model-based index time just like indices!","code":"p1 <- sims_sum |>   ggplot() +   geom_line(aes(x = year, y = est)) +   geom_ribbon(aes(x = year, y = est, ymin = lwr, ymax = upr), alpha = 0.4) +   xlab(\"Year\") +   ylab(\"Biomass estimate (tons)\")  p1"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B-gam-sdmTMB-example.html","id":"fit-an-analogous-model-in-sdmtmb","dir":"Articles","previous_headings":"","what":"Fit an analogous model in `sdmTMB`","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"spatiotemporal GAM fit (fit_gam_st) analog sdmTMB. trying get (less) index using sdmTMB instead. calculate index model sdmTMB, need run predict.sdmTMB() function argument return_tmb_object = TRUE. can run get_index() function extract total biomass calculations standard errors. can set area argument cell_area column km2. case value 4 km2 cells, since grid cells 2 km x 2 km. grid cells fully survey domain (land), feed vector grid areas area argument matched number grid cells. density units tonnes per km2 data, index tonnes. used bias_correction = FALSE speed things , final result want use bias correction. Let’s see much scale index changes bias correction.","code":"# make a mesh for the predictions - this takes a while with cutoff = 10!! mesh <- make_mesh(dat, c(\"X\", \"Y\"), cutoff=10) plot(mesh)  fit <- sdmTMB(data = dat,                formula = cpue_kgkm2 ~ 1 + as.factor(year), # If you set the intercept to zero, R spontaneously aborts!               mesh = mesh,               family = tweedie(link = \"log\"),               time= \"year\"               )  sanity(fit) tidy(fit)  p <- predict(fit, newdata = grid, return_tmb_object = TRUE)  grid$cell_area <- 4 #Shape_Area_ha index <- get_index(p, area = grid$Shape_Area_ha, bias_correct = FALSE)  ggplot(index, aes(year, est)) +   geom_line() +   geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.4) +   xlab(\"Year\") +   ylab(\"Biomass estimate (tonnes)\") index_c <- get_index(p, area = grid$cell_area, bias_correct = TRUE) index_c$Method <- \"Bias correction\"  bind_rows(index, index_c) %>%   ggplot(aes(year, est, fill = Method)) +   geom_line(aes(colour = Method)) +   geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.4) +   xlab(\"Year\") +   ylab(\"Biomass estimate (tonnes)\")"},{"path":[]},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B_gam_sdmTMB_example.html","id":"goals-of-the-original-exercise","dir":"Articles","previous_headings":"","what":"Goals of the original exercise:","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Practice fitting basic spatiotemporal model. Understand inspect model output. Practice predicting model new data making visualizations predictions. Gain familiarity fitting, comparing interpreting different random field structures. Calculate area-weighted biomass index compare model structure can impact index.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B_gam_sdmTMB_example.html","id":"our-goals-for-this-vignette","dir":"Articles","previous_headings":"","what":"Our goals for this vignette:","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Fit GAM obtain area-weighted biomass index Fit basic spatiotemporal model (GLMM!) using sdmTMB compare GAM GLMM Check system:","code":"PKG <- c(   \"sdmTMB\", # install.packages(\"sdmTMB\", dependencies = TRUE)   \"mgcv\",    \"gratia\",   \"visreg\",    \"gstat\",   \"dplyr\",    \"ggplot2\",    \"INLA\",   \"prediction\",   \"inlabru\",    \"purrr\")  for (p in PKG) {   if(!require(p,character.only = TRUE)) {       install.packages(p)     require(p,character.only = TRUE)} }  options(ggplot2.continuous.colour = \"viridis\") options(ggplot2.continuous.fill = \"viridis\") theme_set(theme_light()) sessionInfo()"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B_gam_sdmTMB_example.html","id":"the-data","dir":"Articles","previous_headings":"","what":"The data","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"work CPUE data yellowfin sole Eastern Bering Sea summer bottom trawl survey. data publicly available FOSS. dataset contains sampling locations (longitude latitude) year. also contains sampling depth meters sample CPUE density units tonnes/km2.","code":"ggplot(data = dat,         mapping = aes(x = longitude_dd, y = latitude_dd, size = cpue_kgha, color = bottom_temperature_c)) +    geom_point(alpha = 0.3)"},{"path":[]},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B_gam_sdmTMB_example.html","id":"add-utm-columns-log-depth-and-year-as-factor","dir":"Articles","previous_headings":"Fit a GAM to spatial data (analogous to spatial-only model in sdmTMB)","what":"Add UTM columns, log depth, and year as factor","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"","code":"dat <- add_utm_columns(dat,                         ll_crs = 4326,                        ll_names = c(\"longitude_dd\", \"latitude_dd\"))  dat$log_depth <- log(dat$depth_m) dat$year_factor <- as.factor(dat$year)  dat[,c(\"X\",\"Y\")] range(dat$X) range(dat$Y)  ggplot(dat, aes(X, Y, size = cpue_kgkm2)) +   geom_point(shape = 21) +   coord_fixed()"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B_gam_sdmTMB_example.html","id":"temporal-effect-plus-spatial-smoother-no-covariates","dir":"Articles","previous_headings":"Fit a GAM to spatial data (analogous to spatial-only model in sdmTMB)","what":"Temporal effect plus spatial smoother, no covariates","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"First, fit GAM without covariates: just year factor spatial smoother \\(s(X,Y)\\). .factor(year) part common component SDMs used generate indices. Get diagnostics perform model checking: Include 2-D smooth space, depth covariate.","code":"start.time <- Sys.time() fit_gam <- gam(   formula = cpue_kgha ~ as.factor(year) +     s(X, Y, k = 50),   family = tw(link = \"log\"),   data = dat )  cat(   \"The GAM took \",   difftime(Sys.time(), start.time, units = \"mins\"),   \" mins to run\" ) gam.check(fit_gam) start.time <- Sys.time() fit_gam_s <- gam(   formula = cpue_kgha ~ s(depth_m) + as.factor(year) +      s(X,Y),    family = tw(link = \"log\"),   data = dat )  cat(\"The GAM took \",      difftime(Sys.time(),start.time, units = \"mins\"),      \"mins to run\")  gam.check(fit_gam_s)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B_gam_sdmTMB_example.html","id":"fit-a-gam-analogous-to-a-spatiotemporal-model-in-sdmtmb","dir":"Articles","previous_headings":"","what":"Fit a GAM analogous to a spatiotemporal model in sdmTMB","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"NOTE: takes long time fit. Include 2-D smooth space year. case, different 2-D smooth year. take much longer fit two. Get diagnostics perform model checking Review console output help verify convergence, whether adequate number basis functions (k). Examine four diagnostic plots. gives different way looking model residuals. top-left Q-Q plot, compares model residuals expected/assumed distribution family. well-fit model’s residuals close 1-1 line, otherwise may - -dispersion present. bottom left histogram residuals. want shape similar distribution family specified. top-right plot residual values function linear predictor. evenly distributed around zero well-fitted model. Finally, bottom-right plot response fitted values. well-fitted model show values near 1-1 line.","code":"start.time <- Sys.time()  fit_gam_st <- gam(   formula = count ~ as.factor(year) +     s(X, Y, by = as.factor(year)),   family = tw(link = \"log\"),   data = dat )  cat(   \"The GAM took \",   difftime(Sys.time(), start.time, units = \"mins\"),   \"mins to run\" ) gam.check(fit_gam_st)"},{"path":[]},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B_gam_sdmTMB_example.html","id":"load-the-grid","dir":"Articles","previous_headings":"Predict to full survey area with new data","what":"Load the grid","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Extrapolation grid EBS. spatiotemporal data, need grid year. nice tidy little chunk purrr code !","code":"# This is another form of the same grid: load(here::here(\"data/pred_grid_ebs.rda\")) # object: pred_grid_ebs #pred_grid_ebs <- read.csv(here::here(\"data/ebs_2022_epsg3338.csv\"),header = TRUE)  get_crs(dat = pred_grid_ebs,ll_names =c(\"lon\",\"lat\"))  grid <- add_utm_columns(pred_grid_ebs,                         #ll_crs = 32603,                         ll_names = c(\"lon\", \"lat\")) range(grid$X)  # Grid from example #wcvi_grid <- readRDS(here::here(\"data/wcvi-grid.rds\")) grid <- purrr::map_dfr(unique(dat$year), ~ tibble(grid, year = .x))"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B_gam_sdmTMB_example.html","id":"predict-cpue-across-the-grid","dir":"Articles","previous_headings":"Predict to full survey area with new data","what":"Predict CPUE across the grid","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"get predicted Plot predictions survey area. Note: EBS grid irregularly spaced, use geom_point() instead geom_tile() geom_raster().","code":"pred_gam <- predict(fit_gam, type = \"response\", newdata = grid) #This takes a long time. pred_gam_df <- cbind(grid, pred_gam) pred_gam_df$Shape_Area_ha <- pred_gam_df$Shape_Area*0.0001 # original Shape_area is in m^2 pred_gam_df$predicted_tot_grid <- pred_gam_df$Shape_Area_ha*pred_gam_df$pred_gam pred_gam_df |>   filter(year==1999) |> # single year  ggplot(aes(X, Y, color=pred_gam)) +    geom_point(size = 0.1) +    scale_fill_viridis_c() +    #facet_wrap(~year) +    coord_fixed() +   labs(color = expression(CPUE (kg/km^2))) +   theme_light() +   theme(legend.position = \"bottom\")"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B_gam_sdmTMB_example.html","id":"calculate-biomass-index-from-gam-via-simulation","dir":"Articles","previous_headings":"","what":"Calculate biomass index from GAM via simulation","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Generally, model-based indices abundance use area grid cell prediction area calculate total index across survey area. simplest way sum predicted biomasses across full grid like :","code":"gam_idx_mt <- pred_gam_df |>    dplyr::group_by(year) |>    summarize(total_wt_mt = sum(predicted_tot_grid)/1000)  head(gam_idx_mt)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B_gam_sdmTMB_example.html","id":"get-uncertainties-for-gam-based-index-by-sampling-from-posteriors","dir":"Articles","previous_headings":"Calculate biomass index from GAM via simulation","what":"Get uncertainties for GAM-based index by sampling from posteriors","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"{gratia} R package evaluating displaying GAM fits. script uses fitted_samples() function, draws fitted values posterior model using Gaussian approximation.","code":"sims <- gratia::fitted_samples(fit_gam, n=10, data=grid,                                 scale=\"response\", seed=9) sims$year <- grid$year[sims$row] sims$area <- rep(pred_gam_df$Shape_Area_ha, times = 10) # matching the # of draws sims$biomass <- sims$fitted * sims$area # expand from density to biomass, given area  level <- 0.95 # specify probability for confidence interval  # Get sum of simulated biomass (density*area) across grid cells, with CI lwr_fn <- function(x) {as.numeric(quantile(x, probs = (1 - level) / 2))} upr_fn <- function(x) {as.numeric(quantile(x, probs = 1 - (1 - level) / 2))}  sims_sum <-  sims %>%    group_by(year,draw) %>%    summarise_at(\"biomass\", list(biomass = sum)) %>%   group_by(year) %>%   summarise_at(\"biomass\", list(est = median, # could use mean                            lwr = lwr_fn,                            upr = upr_fn))"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B_gam_sdmTMB_example.html","id":"index-standardization-using-sdmtmb","dir":"Articles","previous_headings":"","what":"Index standardization using sdmTMB","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"calculate index models, need run predict.sdmTMB() function argument return_tmb_object = TRUE. can run get_index() function extract total biomass calculations standard errors. can set area argument cell_area column km2. case value 4 km2 cells, since grid cells 2 km x 2 km. grid cells fully survey domain (land), feed vector grid areas area argument matched number grid cells. density units tonnes per km2 data, index tonnes. used bias_correction = FALSE speed things , final result want use bias correction. Let’s see much scale index changes bias correction.","code":"p <- predict(fit, newdata = grid, return_tmb_object = TRUE) index <- get_index(p, area = grid$cell_area, bias_correct = FALSE)  ggplot(index, aes(year, est)) +   geom_line() +   geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.4) +   xlab(\"Year\") +   ylab(\"Biomass estimate (tonnes)\") index_c <- get_index(p, area = grid$cell_area, bias_correct = TRUE) index_c$Method <- \"Bias correction\"  bind_rows(index, index_c) %>%   ggplot(aes(year, est, fill = Method)) +   geom_line(aes(colour = Method)) +   geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.4) +   xlab(\"Year\") +   ylab(\"Biomass estimate (tonnes)\")"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/B_gam_sdmTMB_example.html","id":"calculate-biomass-index-from-gam-via-simulation-1","dir":"Articles","previous_headings":"","what":"Calculate biomass index from GAM via simulation","title":"Fitting a spatiotemporal model with a GAM and deriving an abundance index","text":"Note approach uses Gaussian approximation posterior, implemented currently gratia package. However, better estimate uncertainty derived sampling actual posterior distribution. However, beyond scope today’s lesson. Plot biomass index:","code":"sims <- gratia::fitted_samples(fit_gam, n=10, newdata=grid,                                 scale=\"response\", seed=9) sims$year <- grid$year[sims$row] sims$biomass <- sims$fitted * 4 # expand from density to biomass, given area  level <- 0.95 # specify probability for confidence interval  # Get sum of simulated biomass (density*area) across grid cells, with CI lwr_fn <- function(x) {as.numeric(quantile(x, probs = (1 - level) / 2))} upr_fn <- function(x) {as.numeric(quantile(x, probs = 1 - (1 - level) / 2))}  sims_sum <-  sims %>%    group_by(year,draw) %>%    summarise_at(\"biomass\", list(biomass = sum)) %>%   group_by(year) %>%   summarise_at(\"biomass\", list(est = median, # could use mean                            lwr = lwr_fn,                            upr = upr_fn)) ggplot(sims_sum, aes(year, est)) + geom_line() +   geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.4) +   xlab('Year') + ylab('Biomass estimate (kg)')"},{"path":[]},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/C-model-comparisons.html","id":"wrangle-data","dir":"Articles","previous_headings":"GAMs: the old fashioned way","what":"1. Wrangle Data","title":"Compare {sdmgamindex} to regular GAMs","text":"","code":"SPECIES <- c(# must match common name column   \"walleye pollock\",   \"yellowfin sole\",   \"red king crab\" ) YEARS <- 2015:2021 SRVY <- \"EBS\" method <- \"ML\" knotsP <- 376 # dir_out <- here::here(\"inst\",\"regular_gam_approach\")  crs_latlon = \"+proj=longlat +datum=WGS84\" crs_proj = \"EPSG:3338\"  dat <- sdmgamindex::noaa_afsc_public_foss  # Get cold pool data using cold pool data from the {coldpool} R package dat <- dat %>%   dplyr::mutate(sx = ((longitude_dd_start - mean(longitude_dd_start, na.rm = TRUE))/1000),                 sy = ((latitude_dd_start - mean(latitude_dd_start, na.rm = TRUE))/1000)) %>%    stats::na.omit() %>%    dplyr::filter(common_name %in% SPECIES &                   year %in% YEARS &                   srvy %in% SRVY) %>%    dplyr::rename(GEAR_TEMPERATURE = bottom_temperature_c,                  BOTTOM_DEPTH = depth_m,                  Year = year)  head(dat) #>   Year srvy             survey survey_definition_id cruise cruisejoin haul #> 1 2015  EBS eastern Bering Sea                   98 201501       -698  152 #> 2 2015  EBS eastern Bering Sea                   98 201501       -698  127 #> 3 2015  EBS eastern Bering Sea                   98 201501       -698  126 #> 4 2015  EBS eastern Bering Sea                   98 201501       -698  104 #> 5 2015  EBS eastern Bering Sea                   98 201501       -698   99 #> 6 2015  EBS eastern Bering Sea                   98 201501       -698   98 #>   hauljoin stratum station vessel_id   vessel_name           date_time #> 1   -14477      42  IH2221       162 ALASKA KNIGHT 2015-06-28 12:23:43 #> 2   -14393      42    H-20       162 ALASKA KNIGHT 2015-06-23 14:32:25 #> 3   -14392      42  HG2019       162 ALASKA KNIGHT 2015-06-23 12:04:09 #> 4   -14184      20    N-18       162 ALASKA KNIGHT 2015-07-26 10:27:31 #> 5   -14183      20    O-02       162 ALASKA KNIGHT 2015-07-26 07:43:24 #> 6   -14182      20    N-02       162 ALASKA KNIGHT 2015-07-25 12:29:19 #>   latitude_dd_start longitude_dd_start latitude_dd_end longitude_dd_end #> 1          57.52534          -170.5923        57.49911        -170.5882 #> 2          57.32033          -169.5767        57.32758        -169.6213 #> 3          57.15541          -169.3307        57.17475        -169.3037 #> 4          59.34784          -168.5795        59.32518        -168.5514 #> 5          59.64832          -167.2660        59.66672        -167.3018 #> 6          59.33036          -167.2015        59.33162        -167.2511 #>   GEAR_TEMPERATURE surface_temperature_c BOTTOM_DEPTH species_code  itis  worms #> 1              4.8                   8.0           75        69322 97935 233889 #> 2              3.8                   7.7           61        69322 97935 233889 #> 3              4.5                   8.1           72        69322 97935 233889 #> 4              3.2                   4.0           42        69322 97935 233889 #> 5              4.5                   4.8           31        69322 97935 233889 #> 6              5.9                   6.0           32        69322 97935 233889 #>     common_name            scientific_name id_rank cpue_kgkm2 cpue_nokm2 count #> 1 red king crab Paralithodes camtschaticus species 1149.68610  284.27420    14 #> 2 red king crab Paralithodes camtschaticus species  149.59332   46.96807     2 #> 3 red king crab Paralithodes camtschaticus species  313.89395   50.50587     2 #> 4 red king crab Paralithodes camtschaticus species   78.96451   20.37268     1 #> 5 red king crab Paralithodes camtschaticus species   19.15929   21.52729     1 #> 6 red king crab Paralithodes camtschaticus species   17.04284   22.19120     1 #>   weight_kg taxon_confidence area_swept_km2 distance_fished_km duration_hr #> 1    56.620                1       0.049248              2.925       0.524 #> 2     6.370                1       0.042582              2.812       0.516 #> 3    12.430                1       0.039599              2.701       0.503 #> 4     3.876                1       0.049085              2.985       0.527 #> 5     0.890                1       0.046453              2.879       0.516 #> 6     0.768                1       0.045063              2.837       0.521 #>   net_width_m net_height_m performance            sx            sy #> 1      16.837        1.855           0 -0.0018134758 -0.0007369124 #> 2      15.143        2.368           0 -0.0007978858 -0.0009419224 #> 3      14.661        1.996           0 -0.0005518858 -0.0011068424 #> 4      16.444        2.406           0  0.0001992742  0.0010855876 #> 5      16.135        2.277           0  0.0015128142  0.0013860676 #> 6      15.884        2.326           0  0.0015773242  0.0010681076"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/C-model-comparisons.html","id":"formulas","dir":"Articles","previous_headings":"GAMs: the old fashioned way","what":"2. Formulas","title":"Compare {sdmgamindex} to regular GAMs","text":"","code":"fm <-  list(   # Null model spatial and temporal with an additional year effect   \"fm_1_s_t_st\" = \"Year +     s(sx,sy,bs=c('ts'),k=376) +      s(sx,sy,bs=c('ts'),k=10,by=Year)\",      # Mdoel with simple covariates   \"fm_2_cov\" =      \"s(BOTTOM_DEPTH,bs='ts',k=10) + s(log(GEAR_TEMPERATURE+3),bs='ts',k=10)\" )"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/C-model-comparisons.html","id":"run-simple-gam-models","dir":"Articles","previous_headings":"GAMs: the old fashioned way","what":"3. Run simple GAM models","title":"Compare {sdmgamindex} to regular GAMs","text":"models want try fitting:","code":"comb <- tidyr::crossing(   \"SPECIES\" = SPECIES,    \"fm_name\" = gsub(pattern = \" \", replacement = \"_\", x = names(fm))) %>%    dplyr::left_join(     x = .,      y = data.frame(\"fm\" = gsub(pattern = \"\\n\", replacement = \"\",                                 x = unlist(fm), fixed = TRUE),                     \"fm_name\" = gsub(pattern = \" \", replacement = \"_\",                                      x = names(fm))),      by = \"fm_name\")  comb #> # A tibble: 6 × 3 #>   SPECIES         fm_name     fm                                                 #>   <chr>           <chr>       <chr>                                              #> 1 red king crab   fm_1_s_t_st Year +    s(sx,sy,bs=c('ts'),k=376) +     s(sx,sy… #> 2 red king crab   fm_2_cov    s(BOTTOM_DEPTH,bs='ts',k=10) +s(log(GEAR_TEMPERAT… #> 3 walleye pollock fm_1_s_t_st Year +    s(sx,sy,bs=c('ts'),k=376) +     s(sx,sy… #> 4 walleye pollock fm_2_cov    s(BOTTOM_DEPTH,bs='ts',k=10) +s(log(GEAR_TEMPERAT… #> 5 yellowfin sole  fm_1_s_t_st Year +    s(sx,sy,bs=c('ts'),k=376) +     s(sx,sy… #> 6 yellowfin sole  fm_2_cov    s(BOTTOM_DEPTH,bs='ts',k=10) +s(log(GEAR_TEMPERAT… models <- fittimes <- list()  for(i in 1:nrow(comb)){   cat(\"Fitting \",comb$SPECIES[i],\"\\n\", comb$fm_name[i], \": \", comb$fm[i], \"\\n\")      temp <- paste0(comb$SPECIES[i], \" \", comb$fm_name[i])      dat0 <- dat %>%      dplyr::filter(common_name %in% comb$SPECIES[i])      fittimes[[ temp ]] <-     system.time ( models[[ temp ]] <-                     gam(formula = as.formula(paste0(\"cpue_kgha ~ \", comb$fm[i])),                          data = dat0,                          family = tw,                          gamma = 1.4)  )    }  save(models, fittimes, file = here::here(\"inst\",\"VigC_model_output.rdata\"))"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/C-model-comparisons.html","id":"assess-the-model","dir":"Articles","previous_headings":"GAMs: the old fashioned way","what":"4. Assess the model","title":"Compare {sdmgamindex} to regular GAMs","text":"","code":"b <- lapply(X = models, FUN = AIC) bb <- sapply(models, `[`, 1)  # sdmgamindex::get_surveyidx_aic(models)  b <- AIC(models$`yellowfin sole fm_1_s_t_st`, models$`yellowfin sole fm_2_cov`)# get(paste0(\"b\", 1:9))  b #>                                            df      AIC #> models$`yellowfin sole fm_1_s_t_st` 105.06470 13881.31 #> models$`yellowfin sole fm_2_cov`     15.22028 14558.49  # bb <- get(rownames(b)[b$AIC %in% min(b$AIC):(min(b$AIC)+5)]) # b$df %in% min(b$df):(min(b$df)+5)   # bb bb <- models$`yellowfin sole fm_1_s_t_st` # gam.check(bb) vis.gam(bb) cc <- predict.gam(object = bb, newdata = dat[dat$Year == 2021,])  dat0 <- dat[dat$Year == 2021,] %>%    dplyr::mutate(pred = cc)  figure <- ggplot() +   geom_point(data = dat0,               mapping = aes(x= longitude_dd_start, y = latitude_dd_start, color = pred)) figure bb <- models$`yellowfin sole fm_2_cov` # gam.check(bb) vis.gam(bb) cc <- predict.gam(object = bb, newdata = dat[dat$Year == 2021,])  dat0 <- dat[dat$Year == 2021,] %>%    dplyr::mutate(pred = cc)  figure <- ggplot() +   geom_point(data = dat0,               mapping = aes(x= longitude_dd_start, y = latitude_dd_start, color = pred)) figure"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/D-simple-case-study.html","id":"case-study","dir":"Articles","previous_headings":"","what":"Case study","title":"{sdmgamindex} case study with and without covariates","text":"example, use data NOAA Fisheries’ eastern Bering sea (EBS) bottom trawl survey. Resource Assessment Conservation Engineering (RACE) Division Groundfish Assessment Program (GAP) Alaska Fisheries Science Center (AFSC) conducts fisheries-independent bottom trawl surveys assess populations demersal fish crab stocks Alaska. species covered case study include yellow fin sole, walleye pollock, red king crab.  Yellowfin SoleCommonly caught species realitively easy model assess high abundance, large distribution survey area, consistent availability survey.  Walleye pollockCommon survey, distribution availability survey driven density-dependence temperature cold pool extent. Including covariates model fits help uncover structure help us better understand specie's abundance.  Red King CrabHas patchier less understood availability survey. going estimate indicies species eastern northern Bering Sea shelf. grid designated stations eastern Bering Sea northern Bering Sea bottom trawl survey areas well 50m, 100m, 200m bathymetric boundaries. Credit: NOAA Fisheries sake simple example, assess data 2015 2021.","code":"SPECIES <- c(\"yellowfin sole\", \"walleye pollock\", \"red king crab\") YEARS <- 2015:2023 SRVY <- \"EBS\""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/D-simple-case-study.html","id":"what-data-area-we-using","dir":"Articles","previous_headings":"","what":"1. What data area we using?","title":"{sdmgamindex} case study with and without covariates","text":", use public facing data NOAA AFSC groundfish Bering sea bottom trawl survey. information data compiled, see afsc-gap-products GitHub repo.","code":"dat <- sdmgamindex::noaa_afsc_public_foss %>%    dplyr::filter(srvy == SRVY &                   year %in% YEARS &                   common_name %in% SPECIES) %>%   dplyr::mutate(hauljoin = paste0(stratum, \"_\", station, \"_\", date_time)) %>%   dplyr::select(     year, date_time, latitude_dd_start, longitude_dd_start, # spatiotemproal data     cpue_kgkm2, common_name, # catch data     bottom_temperature_c, depth_m, # possible covariate data     srvy, area_swept_km2, duration_hr, vessel_id, hauljoin # haul/effort data)   ) table(dat$common_name) #>  #>   red king crab walleye pollock  yellowfin sole  #>            3008            3008            2984 head(dat) #>   year           date_time latitude_dd_start longitude_dd_start cpue_kgkm2 #> 1 2015 2015-06-28 12:23:43          62.00251          -174.4650          0 #> 2 2015 2015-06-28 09:58:14          56.69276          -172.5685          0 #> 3 2015 2015-06-28 07:16:35          57.01265          -172.6630          0 #> 4 2015 2015-06-27 14:58:48          57.00871          -173.2584          0 #> 5 2015 2015-06-27 12:00:46          57.34430          -173.3206          0 #> 6 2015 2015-06-27 09:26:43          57.36180          -172.8151          0 #>     common_name bottom_temperature_c depth_m srvy area_swept_km2 duration_hr #> 1 red king crab                 -1.1      73  EBS       0.047765       0.518 #> 2 red king crab                  4.6     134  EBS       0.043215       0.496 #> 3 red king crab                  4.5     121  EBS       0.044596       0.489 #> 4 red king crab                  3.9     142  EBS       0.046972       0.506 #> 5 red king crab                  4.6     121  EBS       0.043312       0.491 #> 6 red king crab                  4.5     117  EBS       0.045057       0.497 #>   vessel_id                    hauljoin #> 1       162 82_V-26_2015-06-28 12:23:43 #> 2       162 61_F-25_2015-06-28 09:58:14 #> 3       162 61_G-25_2015-06-28 07:16:35 #> 4       162 61_G-26_2015-06-27 14:58:48 #> 5       162 61_H-26_2015-06-27 12:00:46 #> 6       162 61_H-25_2015-06-27 09:26:43"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/D-simple-case-study.html","id":"prepare-the-data-from-sdmgamindexget_surveyidx","dir":"Articles","previous_headings":"","what":"2. Prepare the data from sdmgamindex::get_surveyidx():","title":"{sdmgamindex} case study with and without covariates","text":"","code":"# project spatial data crs_proj <- \"EPSG:3338\" # NAD83 / Alaska Albers crs_latlon <- \"+proj=longlat +datum=WGS84\" # decimal degrees  ll <- sdmgamindex::convert_crs(    x = dat$longitude_dd_start,   y = dat$latitude_dd_start,    crs_in = crs_latlon,    crs_out = crs_proj)   YEARS <- sort(unique(dat$year))  # The sdmgamindex::get_surveyidx() expects some columns to be named in a specific way dat_wrangled <- dat %>%    dplyr::rename(     Year = year,     wCPUE = cpue_kgkm2,      COMMON_NAME = common_name,     GEAR_TEMPERATURE = bottom_temperature_c,      BOTTOM_DEPTH = depth_m,     HaulDur = duration_hr,     EFFORT = area_swept_km2,     Ship = vessel_id) %>%   dplyr::mutate(      # create some other vars     Lon = longitude_dd_start,      Lat = latitude_dd_start,      lon = ll$X,     lat = ll$Y,     sx = ((longitude_dd_start - mean(longitude_dd_start, na.rm = TRUE))/1000),     sy = ((latitude_dd_start - mean(latitude_dd_start, na.rm = TRUE))/1000),      ctime = as.numeric(as.character(Year)),     date_time = as.Date(x = date_time, format = \"%m/%d/%Y %H:%M:%S\"),      hour = as.numeric(format(date_time,\"%H\")),     minute = as.numeric(format(date_time,\"%M\")),     day = as.numeric(format(date_time,\"%d\")),     month = as.numeric(format(date_time,\"%m\")),     TimeShotHour = hour + minute/60,     timeOfYear = (month - 1) * 1/12 + (day - 1)/365,             # add some dummy vars and create some other vars     Country = \"USA\",     Gear = \"dummy\",     Quarter = \"2\")  %>%   dplyr::mutate(across((c(\"Year\", \"Ship\", \"COMMON_NAME\")), as.factor)) %>%    dplyr::select(wCPUE, GEAR_TEMPERATURE, BOTTOM_DEPTH, COMMON_NAME, EFFORT,                  Year, Ship, Lon, Lat, lat, lon, sx, sy,                  ctime, TimeShotHour, timeOfYear, Gear, Quarter, HaulDur, hauljoin) head(dat_wrangled) #>   wCPUE GEAR_TEMPERATURE BOTTOM_DEPTH   COMMON_NAME   EFFORT Year Ship #> 1     0             -1.1           73 red king crab 0.047765 2015  162 #> 2     0              4.6          134 red king crab 0.043215 2015  162 #> 3     0              4.5          121 red king crab 0.044596 2015  162 #> 4     0              3.9          142 red king crab 0.046972 2015  162 #> 5     0              4.6          121 red king crab 0.043312 2015  162 #> 6     0              4.5          117 red king crab 0.045057 2015  162 #>         Lon      Lat       lat      lon           sx            sy ctime #> 1 -174.4650 62.00251 1499607.4 -1051788 -0.005686246  0.0037402576  2015 #> 2 -172.5685 56.69276  900491.0 -1120787 -0.003789686 -0.0015694924  2015 #> 3 -172.6630 57.01265  936387.2 -1116444 -0.003884246 -0.0012496024  2015 #> 4 -173.2584 57.00871  946129.4 -1151196 -0.004479586 -0.0012535424  2015 #> 5 -173.3206 57.34430  983096.8 -1144064 -0.004541806 -0.0009179524  2015 #> 6 -172.8151 57.36180  976375.5 -1114402 -0.004036316 -0.0009004524  2015 #>   TimeShotHour timeOfYear  Gear Quarter HaulDur                    hauljoin #> 1            0  0.4906393 dummy       2   0.518 82_V-26_2015-06-28 12:23:43 #> 2            0  0.4906393 dummy       2   0.496 61_F-25_2015-06-28 09:58:14 #> 3            0  0.4906393 dummy       2   0.489 61_G-25_2015-06-28 07:16:35 #> 4            0  0.4878995 dummy       2   0.506 61_G-26_2015-06-27 14:58:48 #> 5            0  0.4878995 dummy       2   0.491 61_H-26_2015-06-27 12:00:46 #> 6            0  0.4878995 dummy       2   0.497 61_H-25_2015-06-27 09:26:43"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/D-simple-case-study.html","id":"define-representitive-station-points-to-fit-and-predict-the-model-at","dir":"Articles","previous_headings":"","what":"3. Define representitive station points to fit and predict the model at","title":"{sdmgamindex} case study with and without covariates","text":"Since surveys done exact location year (’s intention, impossible practice), need define representative latitudes longitudes going predict . prediction grids AFSC uses 2021 VAST model-based indices (subject change - use without asking/checking still current!). also good shapefile hand crop constrain outputs . AFSC GAP, developed {akgfmaps} R package save share shapefiles.","code":"pred_grid <- sdmgamindex::pred_grid_ebs  ll <- sdmgamindex::convert_crs(    x = pred_grid$lon,   y = pred_grid$lat,    crs_in = crs_latlon,    crs_out = crs_proj)   pred_grid <- pred_grid %>%    dplyr::mutate(      lon = ll$X,     lat = ll$Y,     sx = ((lon - mean(lon, na.rm = TRUE))/1000),     sy = ((lat - mean(lat, na.rm = TRUE))/1000)) head(pred_grid) #> # A tibble: 6 × 5 #>         lon      lat Shape_Area    sx    sy #>       <dbl>    <dbl>      <dbl> <dbl> <dbl> #> 1 -1133214. 1542340.   2449160. -290.  517. #> 2 -1129510. 1542340.   9298535. -287.  517. #> 3 -1125806. 1542340.   9749166. -283.  517. #> 4 -1122102. 1542340.   5383834. -279.  517. #> 5 -1118398. 1542340.   1173734. -275.  517. #> 6 -1140622. 1538636.   1525663. -298.  513. # library(devtools) # devtools::install_github(\"afsc-gap-products/akgfmaps\", build_vignettes = TRUE) library(akgfmaps)  map_layers <- akgfmaps::get_base_layers(   select.region = \"bs.south\",   set.crs = crs_proj)  # Let's just see what that looks like: tmp <- map_layers$survey.area tmp$AREA_KM2 <- tmp$PERIM_KM <- NULL plot(tmp)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/D-simple-case-study.html","id":"prepare-covariate-data","dir":"Articles","previous_headings":"","what":"4. Prepare covariate data","title":"{sdmgamindex} case study with and without covariates","text":"want match covariate data prediction grid.","code":"dat_cov <- sdmgamindex::pred_grid_ebs %>%    dplyr::select(-Shape_Area) %>%    dplyr::mutate(      sx = ((lon - mean(lon, na.rm = TRUE))/1000),     sy = ((lat - mean(lat, na.rm = TRUE))/1000))  sp_extrap_raster <- SpatialPoints(   coords = coordinates(as.matrix(dat_cov[,c(\"lon\", \"lat\")])),    proj4string = CRS(crs_latlon) ) dat_cov #> # A tibble: 36,690 × 4 #>      lon   lat       sx      sy #>    <dbl> <dbl>    <dbl>   <dbl> #>  1 -176.  62.1 -0.00748 0.00384 #>  2 -176.  62.1 -0.00741 0.00385 #>  3 -176.  62.2 -0.00735 0.00386 #>  4 -176.  62.2 -0.00728 0.00387 #>  5 -176.  62.2 -0.00721 0.00389 #>  6 -176.  62.1 -0.00759 0.00379 #>  7 -176.  62.1 -0.00752 0.00380 #>  8 -176.  62.1 -0.00746 0.00381 #>  9 -176.  62.1 -0.00739 0.00382 #> 10 -176.  62.1 -0.00732 0.00383 #> # ℹ 36,680 more rows sp_extrap_raster #> class       : SpatialPoints  #> features    : 36690  #> extent      : -178.9664, -157.9516, 54.48348, 62.19158  (xmin, xmax, ymin, ymax) #> crs         : +proj=longlat +datum=WGS84 +no_defs"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/D-simple-case-study.html","id":"a--data-that-varies-over-only-space-depth","dir":"Articles","previous_headings":"4. Prepare covariate data","what":"4a. Data that varies over only space (depth)","title":"{sdmgamindex} case study with and without covariates","text":"Bering sea, depth rarely changes. modeler may consider making variable time-varying well say, Gulf Alaska Aleutian Islands currents island formation can markedly change depth. , going create raster depth Bering sea survey data can merge dataset prediction grid lat/lons.","code":"x <- dat_wrangled %>%   dplyr::select(Lon, Lat, BOTTOM_DEPTH) %>%   stats::na.omit()  %>%    sf::st_as_sf(x = .,                 coords = c(x = \"Lon\", y = \"Lat\"),                 crs = sf::st_crs(crs_latlon))  idw_fit <- gstat::gstat(formula = BOTTOM_DEPTH ~ 1,                         locations = x,                         nmax = 4)  # stn_predict <- raster::predict(idw_fit, x)  extrap_data0 <- raster::predict(   idw_fit, sp_extrap_raster) %>%   # as(sp_extrap_raster, Class = \"SpatialPoints\")) %>%   sf::st_as_sf() %>%   sf::st_transform(crs = crs_latlon)  %>%   stars::st_rasterize()   extrap_data <- stars::st_extract(x = extrap_data0,                                  at = as.matrix(dat_cov[,c(\"lon\", \"lat\")]))  # to make future runs of this faster: save(extrap_data0, extrap_data,       file = here::here(\"inst\",                        paste0(\"vigD_bottom_depth_raster_\",                                min(YEARS),\"-\",max(YEARS), \".rdata\"))) # Just so we can see what we are looking at: plot(extrap_data0, main = \"Interpolated Bottom Depths\") dat_cov <- cbind.data.frame(dat_cov,                              \"BOTTOM_DEPTH\" = extrap_data$var1.pred) %>%   stats::na.omit()  head(dat_cov) #>         lon      lat           sx          sy BOTTOM_DEPTH #> 1 -176.2068 62.13518 -0.007481089 0.003842524     93.00000 #> 2 -176.1395 62.14603 -0.007413772 0.003853379     93.00000 #> 3 -176.0722 62.15686 -0.007346407 0.003864203     93.00000 #> 4 -176.0047 62.16765 -0.007278995 0.003874995     92.76145 #> 5 -175.9373 62.17841 -0.007211535 0.003885756     92.75523 #> 6 -176.3179 62.08210 -0.007592106 0.003789448     93.00000"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/D-simple-case-study.html","id":"b--data-that-varies-over-space-and-time-bottom-temperature","dir":"Articles","previous_headings":"4. Prepare covariate data","what":"4b. Data that varies over space and time (bottom temperature)","title":"{sdmgamindex} case study with and without covariates","text":", bottom temperature, thereby cold pool extent, show drive distribution many species. especially true walleye pollock. going lean -house prepared validated pre-prepared {coldpool} R package [@RohanColdPool]. data interpolates whole area survey missing data.","code":"# Just so we can see what we are looking at: #plot(terra::unwrap(coldpool::ebs_bottom_temperature)) tmp <- which(readr::parse_number(names(terra::unwrap(coldpool::ebs_bottom_temperature))) %in% YEARS)  dat_temperature <- terra::unwrap(coldpool::ebs_bottom_temperature)[[tmp]] %>%    terra::extract(y = dat_cov[,c(\"lon\", \"lat\")] %>%                     sf::sf_project(from = \"+proj=longlat\",                                   to = \"EPSG:3338\")) %>%    data.frame() names(dat_temperature) <- paste0(\"GEAR_TEMPERATURE\", YEARS)  dat_cov <- dplyr::bind_cols(dat_cov, dat_temperature) %>%    na.omit() head(dat_cov) #>         lon      lat           sx          sy BOTTOM_DEPTH GEAR_TEMPERATURE2015 #> 2 -176.1395 62.14603 -0.007413772 0.003853379     93.00000          -0.07311002 #> 3 -176.0722 62.15686 -0.007346407 0.003864203     93.00000          -0.07311002 #> 4 -176.0047 62.16765 -0.007278995 0.003874995     92.76145          -0.15166534 #> 7 -176.2507 62.09301 -0.007524943 0.003800355     93.00000           0.06603578 #> 8 -176.1835 62.10389 -0.007457733 0.003811231     93.00000          -0.02377643 #> 9 -176.1162 62.11473 -0.007390475 0.003822076     93.00000          -0.11071504 #>   GEAR_TEMPERATURE2016 GEAR_TEMPERATURE2017 GEAR_TEMPERATURE2018 #> 2          -0.30315974            0.2442329             2.066675 #> 3          -0.30315974            0.2442329             2.066675 #> 4          -0.40172631            0.1406713             2.046152 #> 7          -0.08488923            0.4213759             2.109732 #> 8          -0.18901448            0.3380764             2.087453 #> 9          -0.29478970            0.2444835             2.064520 #>   GEAR_TEMPERATURE2019 GEAR_TEMPERATURE2021 GEAR_TEMPERATURE2022 #> 2             1.242070            0.1678221           -1.1127377 #> 3             1.242070            0.1678221           -1.1127377 #> 4             1.178158            0.1119230           -1.1903751 #> 7             1.372879            0.3057251           -0.9713215 #> 8             1.317465            0.2446349           -1.0861878 #> 9             1.257273            0.1832289           -1.1890295 #>   GEAR_TEMPERATURE2023 #> 2           -0.9886659 #> 3           -0.9886659 #> 4           -1.0962228 #> 7           -0.7410921 #> 8           -0.8782412 #> 9           -1.0114685"},{"path":[]},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/D-simple-case-study.html","id":"a--catch-data","dir":"Articles","previous_headings":"5. DATRAS structure","what":"5a. Catch Data","title":"{sdmgamindex} case study with and without covariates","text":"","code":"# Identify vars that will be used -------------------------------------------- varsbyyr <- unique( # c(\"GEAR_TEMPERATURE\", \"cpi\")   gsub(pattern = \"[0-9]+\",         replacement = \"\",         x = names(dat_cov)[grepl(names(dat_cov),                                  pattern = \"[0-9]+\")]))  vars <- unique( # c(\"BOTTOM_DEPTH\")   names(dat_cov)[!grepl(names(dat_cov),                          pattern = \"[0-9]+\")]) vars <- vars[!(vars %in% c(\"LONG\", \"LAT\", \"lon\", \"lat\", \"sx\", \"sy\"))]  dat_catch_haul <- dat_wrangled  head(dat_catch_haul) #>   wCPUE GEAR_TEMPERATURE BOTTOM_DEPTH   COMMON_NAME   EFFORT Year Ship #> 1     0             -1.1           73 red king crab 0.047765 2015  162 #> 2     0              4.6          134 red king crab 0.043215 2015  162 #> 3     0              4.5          121 red king crab 0.044596 2015  162 #> 4     0              3.9          142 red king crab 0.046972 2015  162 #> 5     0              4.6          121 red king crab 0.043312 2015  162 #> 6     0              4.5          117 red king crab 0.045057 2015  162 #>         Lon      Lat       lat      lon           sx            sy ctime #> 1 -174.4650 62.00251 1499607.4 -1051788 -0.005686246  0.0037402576  2015 #> 2 -172.5685 56.69276  900491.0 -1120787 -0.003789686 -0.0015694924  2015 #> 3 -172.6630 57.01265  936387.2 -1116444 -0.003884246 -0.0012496024  2015 #> 4 -173.2584 57.00871  946129.4 -1151196 -0.004479586 -0.0012535424  2015 #> 5 -173.3206 57.34430  983096.8 -1144064 -0.004541806 -0.0009179524  2015 #> 6 -172.8151 57.36180  976375.5 -1114402 -0.004036316 -0.0009004524  2015 #>   TimeShotHour timeOfYear  Gear Quarter HaulDur                    hauljoin #> 1            0  0.4906393 dummy       2   0.518 82_V-26_2015-06-28 12:23:43 #> 2            0  0.4906393 dummy       2   0.496 61_F-25_2015-06-28 09:58:14 #> 3            0  0.4906393 dummy       2   0.489 61_G-25_2015-06-28 07:16:35 #> 4            0  0.4878995 dummy       2   0.506 61_G-26_2015-06-27 14:58:48 #> 5            0  0.4878995 dummy       2   0.491 61_H-26_2015-06-27 12:00:46 #> 6            0  0.4878995 dummy       2   0.497 61_H-25_2015-06-27 09:26:43 allpd <- lapply(YEARS,                  FUN = sdmgamindex::get_prediction_grid,                  x = dat_cov,                  vars = vars,                  varsbyyr = varsbyyr) names(allpd) <- as.character(YEARS) head(allpd[1][[1]]) #>         lon      lat           sx          sy BOTTOM_DEPTH GEAR_TEMPERATURE #> 2 -176.1395 62.14603 -0.007413772 0.003853379     93.00000      -0.07311002 #> 3 -176.0722 62.15686 -0.007346407 0.003864203     93.00000      -0.07311002 #> 4 -176.0047 62.16765 -0.007278995 0.003874995     92.76145      -0.15166534 #> 7 -176.2507 62.09301 -0.007524943 0.003800355     93.00000       0.06603578 #> 8 -176.1835 62.10389 -0.007457733 0.003811231     93.00000      -0.02377643 #> 9 -176.1162 62.11473 -0.007390475 0.003822076     93.00000      -0.11071504 #>   EFFORT #> 2      1 #> 3      1 #> 4      1 #> 7      1 #> 8      1 #> 9      1"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/D-simple-case-study.html","id":"b--covariate-data","dir":"Articles","previous_headings":"5. DATRAS structure","what":"5b. Covariate Data","title":"{sdmgamindex} case study with and without covariates","text":"","code":"## split data by species, make into DATRASraw + Nage matrix ds <- split(dat_catch_haul,dat_catch_haul$COMMON_NAME) ds <- lapply(ds, sdmgamindex::get_datrasraw) ## OBS, response is added here in \"Nage\" matrix -- use wCPUE ds <- lapply(ds,function(x) { x[[2]]$Nage <- matrix(x$wCPUE,ncol=1); colnames(x[[2]]$Nage)<-1; x } ) ds #> $`red king crab` #> Object of class 'DATRASraw' #> =========================== #> Number of hauls: 3008  #> Number of species: 0  #> Number of countries: 0  #> Years: 2015 2016 2017 2018 2019 2021 2022 2023  #> Quarters:  #> Gears:  #> Haul duration: 0.189 - 0.656 minutes #>  #> $`walleye pollock` #> Object of class 'DATRASraw' #> =========================== #> Number of hauls: 3008  #> Number of species: 0  #> Number of countries: 0  #> Years: 2015 2016 2017 2018 2019 2021 2022 2023  #> Quarters:  #> Gears:  #> Haul duration: 0.189 - 0.656 minutes #>  #> $`yellowfin sole` #> Object of class 'DATRASraw' #> =========================== #> Number of hauls: 2984  #> Number of species: 0  #> Number of countries: 0  #> Years: 2015 2016 2017 2018 2019 2021 2022 2023  #> Quarters:  #> Gears:  #> Haul duration: 0.189 - 0.656 minutes"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/D-simple-case-study.html","id":"formulas","dir":"Articles","previous_headings":"","what":"6. Formulas","title":"{sdmgamindex} case study with and without covariates","text":"","code":"fm <-  list(   # Null model spatial and temporal with an additional year effect   \"fm_1_s_t_st\" = \"Year +     s(sx,sy,bs=c('ts'),k=376) +     s(sx,sy,bs=c('ts'),k=10,by=Year)\",      # Mdoel with simple covariates   \"fm_2_cov\" =     \"s(BOTTOM_DEPTH,bs='ts',k=10) + s(log(GEAR_TEMPERATURE+3),bs='ts',k=10)\",      # Mdoel with simple covariates and spatial and temporal with an additional year effect   \"fm_3_s_t_st_cov\" =     \"Year +     s(sx,sy,bs=c('ts'),k=376) +     s(sx,sy,bs=c('ts'),k=10,by=Year) +      s(BOTTOM_DEPTH,bs='ts',k=10) + s(log(GEAR_TEMPERATURE+3),bs='ts',k=10)\" )"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/D-simple-case-study.html","id":"fit-the-model","dir":"Articles","previous_headings":"","what":"7. Fit the Model","title":"{sdmgamindex} case study with and without covariates","text":"models want try fitting:","code":"#> Loading objects: #>   models #>   fittimes #> Loading objects: #>   models #>   fittimes #> Loading objects: #>   models #>   fittimes models <- fittimes <- list()  for(i in 1:nrow(comb)){   cat(\"Fitting \",comb$SPECIES[i],\"\\n\", comb$fm_name[i], \": \", comb$fm[i], \"\\n\")      temp <- paste0(comb$SPECIES[i], \" \", comb$fm_name[i])      fittimes[[ temp ]] <-     system.time ( models[[ temp ]] <-                     sdmgamindex::get_surveyidx(                       x = ds[[ comb$SPECIES[i] ]],                       ages = 1,                       myids = NULL,                       predD = allpd,                       cutOff = 0,                       fam = \"Tweedie\",                       modelP = comb$fm[i],                       gamma = 1,                       control = list(trace = TRUE,                                      maxit = 20))  )    } # temp <- sapply(models, `[`, \"pModels\") # mods <- sapply(temp, `[`, 1) # lapply(X = mods, FUN = AIC)  # sdmgamindex::get_surveyidx_aic(x = models) AIC(models$`red king crab fm_1_s_t_st`$pModels[[1]],      models$`red king crab fm_2_cov`$pModels[[1]],      models$`red king crab fm_3_s_t_st_cov`$pModels[[1]],      models$`walleye pollock fm_1_s_t_st`$pModels[[1]],      models$`walleye pollock fm_2_cov`$pModels[[1]],      models$`walleye pollock fm_3_s_t_st_cov`$pModels[[1]],      models$`yellowfin sole fm_1_s_t_st`$pModels[[1]],      models$`yellowfin sole fm_2_cov`$pModels[[1]],      models$`yellowfin sole fm_3_s_t_st_cov`$pModels[[1]]) #>                                                              df      AIC #> models$`red king crab fm_1_s_t_st`$pModels[[1]]       166.46354 12298.32 #> models$`red king crab fm_2_cov`$pModels[[1]]           16.90395 13568.53 #> models$`red king crab fm_3_s_t_st_cov`$pModels[[1]]   156.78706 12217.53 #> models$`walleye pollock fm_1_s_t_st`$pModels[[1]]     197.52053 58792.64 #> models$`walleye pollock fm_2_cov`$pModels[[1]]         18.36274 59795.46 #> models$`walleye pollock fm_3_s_t_st_cov`$pModels[[1]] 215.84828 58550.88 #> models$`yellowfin sole fm_1_s_t_st`$pModels[[1]]      236.79139 36031.20 #> models$`yellowfin sole fm_2_cov`$pModels[[1]]          16.25734 37577.42 #> models$`yellowfin sole fm_3_s_t_st_cov`$pModels[[1]]  202.56223 35918.65 lapply(models,function(x) gam.check(x$pModels[[1]])) ## Model summaries lapply(models,function(x) summary(x$pModels[[1]])) #> $`red king crab fm_1_s_t_st` #>  #> Family: Tweedie(p=1.441)  #> Link function: log  #>  #> Formula: #> A1 ~ Year + s(sx, sy, bs = c(\"ts\"), k = 376) + s(sx, sy, bs = c(\"ts\"),  #>     k = 10, by = Year) #>  #> Parametric coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  -1.0822     1.3332  -0.812   0.4170   #> Year2016     -1.3109     0.8276  -1.584   0.1133   #> Year2017     -1.0211     0.8177  -1.249   0.2119   #> Year2018     -1.4792     0.8192  -1.806   0.0711 . #> Year2019     -1.0888     0.8621  -1.263   0.2067   #> Year2021     -0.7203     0.8212  -0.877   0.3805   #> Year2022     -0.8510     0.8210  -1.037   0.3000   #> Year2023     -1.1846     0.8182  -1.448   0.1478   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Approximate significance of smooth terms: #>                         edf Ref.df     F  p-value     #> s(sx,sy)          1.300e+02    375 4.748  < 2e-16 *** #> s(sx,sy):Year2015 6.475e+00      9 8.019  < 2e-16 *** #> s(sx,sy):Year2016 1.877e+00      9 2.699 1.70e-06 *** #> s(sx,sy):Year2017 5.890e-04      9 0.000  0.23409     #> s(sx,sy):Year2018 1.527e-03      9 0.000  0.50378     #> s(sx,sy):Year2019 3.428e+00      9 1.618  0.00166 **  #> s(sx,sy):Year2021 1.778e+00      9 2.312 7.54e-06 *** #> s(sx,sy):Year2022 1.046e+00      9 0.365  0.04367 *   #> s(sx,sy):Year2023 1.855e-04      9 0.000  0.56453     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> R-sq.(adj) =  0.419   Deviance explained = 81.4% #> -ML = 6255.7  Scale est. = 24.556    n = 3008 #>  #> $`walleye pollock fm_1_s_t_st` #>  #> Family: Tweedie(p=1.852)  #> Link function: log  #>  #> Formula: #> A1 ~ Year + s(sx, sy, bs = c(\"ts\"), k = 376) + s(sx, sy, bs = c(\"ts\"),  #>     k = 10, by = Year) #>  #> Parametric coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  9.23070    0.05088 181.435  < 2e-16 *** #> Year2016    -0.34488    0.07286  -4.733 2.32e-06 *** #> Year2017    -0.25199    0.07261  -3.470 0.000527 *** #> Year2018    -0.88291    0.07448 -11.854  < 2e-16 *** #> Year2019    -0.41875    0.07320  -5.721 1.17e-08 *** #> Year2021    -0.86757    0.07432 -11.673  < 2e-16 *** #> Year2022    -0.60512    0.07364  -8.217 3.14e-16 *** #> Year2023    -0.78244    0.07400 -10.574  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Approximate significance of smooth terms: #>                         edf Ref.df      F  p-value     #> s(sx,sy)          1.660e+02    375  4.417  < 2e-16 *** #> s(sx,sy):Year2015 3.715e-03      9  0.000  0.99650     #> s(sx,sy):Year2016 1.773e+00      9  1.104  0.00312 **  #> s(sx,sy):Year2017 1.876e+00      9  6.015  < 2e-16 *** #> s(sx,sy):Year2018 7.899e+00      9 12.816  < 2e-16 *** #> s(sx,sy):Year2019 1.964e+00      9  5.686  < 2e-16 *** #> s(sx,sy):Year2021 1.056e+00      9  0.268  0.09955 .   #> s(sx,sy):Year2022 1.915e+00      9  3.200 6.38e-07 *** #> s(sx,sy):Year2023 4.925e-03      9  0.000  0.79980     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> R-sq.(adj) =  0.157   Deviance explained = 40.5% #> -ML =  29507  Scale est. = 3.8497    n = 3008 #>  #> $`yellowfin sole fm_1_s_t_st` #>  #> Family: Tweedie(p=1.582)  #> Link function: log  #>  #> Formula: #> A1 ~ Year + s(sx, sy, bs = c(\"ts\"), k = 376) + s(sx, sy, bs = c(\"ts\"),  #>     k = 10, by = Year) #>  #> Parametric coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   3.7348     0.1515  24.652  < 2e-16 *** #> Year2016      0.9841     0.1095   8.988  < 2e-16 *** #> Year2017      1.0170     0.1094   9.298  < 2e-16 *** #> Year2018      0.9902     0.1126   8.793  < 2e-16 *** #> Year2019      1.5588     0.1394  11.181  < 2e-16 *** #> Year2021      0.1099     0.1192   0.922  0.35681     #> Year2022      0.2457     0.1184   2.074  0.03813 *   #> Year2023     -0.3476     0.1239  -2.806  0.00505 **  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Approximate significance of smooth terms: #>                         edf Ref.df      F p-value     #> s(sx,sy)          2.036e+02    375 13.283  <2e-16 *** #> s(sx,sy):Year2015 3.409e+00      9  4.735  <2e-16 *** #> s(sx,sy):Year2016 1.305e-02      9  0.001   0.389     #> s(sx,sy):Year2017 3.262e-03      9  0.000   0.509     #> s(sx,sy):Year2018 1.877e+00      9  3.622  <2e-16 *** #> s(sx,sy):Year2019 7.289e+00      9 18.450  <2e-16 *** #> s(sx,sy):Year2021 1.949e+00      9  4.406  <2e-16 *** #> s(sx,sy):Year2022 2.003e+00      9 10.001  <2e-16 *** #> s(sx,sy):Year2023 1.972e+00      9  5.923  <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> R-sq.(adj) =  0.481   Deviance explained = 85.7% #> -ML =  18210  Scale est. = 17.871    n = 2984 #>  #> $`red king crab fm_2_cov` #>  #> Family: Tweedie(p=1.551)  #> Link function: log  #>  #> Formula: #> A1 ~ s(BOTTOM_DEPTH, bs = \"ts\", k = 10) + s(log(GEAR_TEMPERATURE +  #>     3), bs = \"ts\", k = 10) #>  #> Parametric coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)   0.8184     0.3276   2.498   0.0125 * #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Approximate significance of smooth terms: #>                                edf Ref.df     F p-value     #> s(BOTTOM_DEPTH)              6.032      9 64.85  <2e-16 *** #> s(log(GEAR_TEMPERATURE + 3)) 6.533      9 33.04  <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> R-sq.(adj) =  0.0909   Deviance explained = 49.8% #> -ML = 6806.2  Scale est. = 33.425    n = 3008 #>  #> $`walleye pollock fm_2_cov` #>  #> Family: Tweedie(p=1.885)  #> Link function: log  #>  #> Formula: #> A1 ~ s(BOTTOM_DEPTH, bs = \"ts\", k = 10) + s(log(GEAR_TEMPERATURE +  #>     3), bs = \"ts\", k = 10) #>  #> Parametric coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  8.98071    0.02158   416.2   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Approximate significance of smooth terms: #>                                edf Ref.df     F p-value     #> s(BOTTOM_DEPTH)              6.340      9 33.86  <2e-16 *** #> s(log(GEAR_TEMPERATURE + 3)) 7.483      9 12.77  <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> R-sq.(adj) =  0.0501   Deviance explained = 13.4% #> -ML =  29917  Scale est. = 3.9341    n = 3008 #>  #> $`yellowfin sole fm_2_cov` #>  #> Family: Tweedie(p=1.622)  #> Link function: log  #>  #> Formula: #> A1 ~ s(BOTTOM_DEPTH, bs = \"ts\", k = 10) + s(log(GEAR_TEMPERATURE +  #>     3), bs = \"ts\", k = 10) #>  #> Parametric coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   4.9352     0.1319   37.41   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Approximate significance of smooth terms: #>                                edf Ref.df      F p-value     #> s(BOTTOM_DEPTH)              5.714      9 320.02  <2e-16 *** #> s(log(GEAR_TEMPERATURE + 3)) 7.168      9  65.49  <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> R-sq.(adj) =    0.3   Deviance explained = 69.3% #> -ML =  18812  Scale est. = 24.189    n = 2984 #>  #> $`red king crab fm_3_s_t_st_cov` #>  #> Family: Tweedie(p=1.432)  #> Link function: log  #>  #> Formula: #> A1 ~ Year + s(sx, sy, bs = c(\"ts\"), k = 376) + s(sx, sy, bs = c(\"ts\"),  #>     k = 10, by = Year) + s(BOTTOM_DEPTH, bs = \"ts\", k = 10) +  #>     s(log(GEAR_TEMPERATURE + 3), bs = \"ts\", k = 10) #>  #> Parametric coefficients: #>             Estimate Std. Error t value Pr(>|t|) #> (Intercept)  -1.2980     1.2055  -1.077    0.282 #> Year2016     -0.7716     1.1935  -0.647    0.518 #> Year2017     -1.2801     1.1834  -1.082    0.279 #> Year2018     -1.4984     1.1856  -1.264    0.206 #> Year2019     -0.7787     1.2446  -0.626    0.532 #> Year2021     -0.9421     1.1870  -0.794    0.427 #> Year2022     -1.1151     1.1865  -0.940    0.347 #> Year2023     -1.5144     1.1850  -1.278    0.201 #>  #> Approximate significance of smooth terms: #>                                    edf Ref.df      F  p-value     #> s(sx,sy)                     1.128e+02    375  3.066  < 2e-16 *** #> s(sx,sy):Year2015            7.391e+00      9 10.712  < 2e-16 *** #> s(sx,sy):Year2016            1.655e+00      9  1.482 0.000262 *** #> s(sx,sy):Year2017            1.896e-04      9  0.000 0.428072     #> s(sx,sy):Year2018            3.747e-03      9  0.000 0.493657     #> s(sx,sy):Year2019            4.346e+00      9  2.922 1.04e-05 *** #> s(sx,sy):Year2021            1.677e+00      9  1.769 6.58e-05 *** #> s(sx,sy):Year2022            1.104e+00      9  0.415 0.033329 *   #> s(sx,sy):Year2023            3.548e-04      9  0.000 0.425829     #> s(BOTTOM_DEPTH)              3.759e+00      9  4.103  < 2e-16 *** #> s(log(GEAR_TEMPERATURE + 3)) 5.325e+00      9  8.594  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> R-sq.(adj) =  0.471   Deviance explained = 82.2% #> -ML = 6221.2  Scale est. = 24.455    n = 3008 #>  #> $`walleye pollock fm_3_s_t_st_cov` #>  #> Family: Tweedie(p=1.845)  #> Link function: log  #>  #> Formula: #> A1 ~ Year + s(sx, sy, bs = c(\"ts\"), k = 376) + s(sx, sy, bs = c(\"ts\"),  #>     k = 10, by = Year) + s(BOTTOM_DEPTH, bs = \"ts\", k = 10) +  #>     s(log(GEAR_TEMPERATURE + 3), bs = \"ts\", k = 10) #>  #> Parametric coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  9.28464    0.05025 184.770  < 2e-16 *** #> Year2016    -0.10550    0.07787  -1.355  0.17558     #> Year2017    -0.54712    0.07344  -7.450 1.24e-13 *** #> Year2018    -0.80890    0.07762 -10.421  < 2e-16 *** #> Year2019    -0.23479    0.07803  -3.009  0.00264 **  #> Year2021    -1.06713    0.07516 -14.198  < 2e-16 *** #> Year2022    -0.99154    0.07624 -13.005  < 2e-16 *** #> Year2023    -1.20467    0.07828 -15.390  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Approximate significance of smooth terms: #>                                    edf Ref.df      F  p-value     #> s(sx,sy)                     1.635e+02    375  3.146  < 2e-16 *** #> s(sx,sy):Year2015            5.169e-03      9  0.000 0.261743     #> s(sx,sy):Year2016            1.976e+00      9  5.704  < 2e-16 *** #> s(sx,sy):Year2017            1.565e+00      9  1.251 0.000403 *** #> s(sx,sy):Year2018            8.137e+00      9 14.253  < 2e-16 *** #> s(sx,sy):Year2019            1.616e+00      9  0.821 0.006866 **  #> s(sx,sy):Year2021            1.305e+00      9  0.531 0.019664 *   #> s(sx,sy):Year2022            6.462e+00      9  3.257 1.37e-05 *** #> s(sx,sy):Year2023            1.617e+00      9  0.854 0.005659 **  #> s(BOTTOM_DEPTH)              5.427e+00      9  3.255  < 2e-16 *** #> s(log(GEAR_TEMPERATURE + 3)) 6.162e+00      9 23.126  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> R-sq.(adj) =  0.194   Deviance explained = 45.1% #> -ML =  29411  Scale est. = 3.7999    n = 3008 #>  #> $`yellowfin sole fm_3_s_t_st_cov` #>  #> Family: Tweedie(p=1.588)  #> Link function: log  #>  #> Formula: #> A1 ~ Year + s(sx, sy, bs = c(\"ts\"), k = 376) + s(sx, sy, bs = c(\"ts\"),  #>     k = 10, by = Year) + s(BOTTOM_DEPTH, bs = \"ts\", k = 10) +  #>     s(log(GEAR_TEMPERATURE + 3), bs = \"ts\", k = 10) #>  #> Parametric coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  3.74325    0.14599  25.640  < 2e-16 *** #> Year2016     0.57304    0.09515   6.023 1.94e-09 *** #> Year2017     0.90875    0.08874  10.240  < 2e-16 *** #> Year2018     0.58787    0.09636   6.101 1.20e-09 *** #> Year2019     1.19028    0.13358   8.911  < 2e-16 *** #> Year2021    -0.20528    0.10002  -2.052  0.04022 *   #> Year2022     0.12566    0.10152   1.238  0.21590     #> Year2023    -0.33030    0.10833  -3.049  0.00232 **  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Approximate significance of smooth terms: #>                                    edf Ref.df      F  p-value     #> s(sx,sy)                     1.594e+02    375  4.262  < 2e-16 *** #> s(sx,sy):Year2015            1.799e+00      9  2.038 3.15e-05 *** #> s(sx,sy):Year2016            5.771e-04      9  0.000    0.401     #> s(sx,sy):Year2017            2.910e-02      9  0.003    0.306     #> s(sx,sy):Year2018            1.839e+00      9  2.163 2.07e-05 *** #> s(sx,sy):Year2019            7.915e+00      9 16.983  < 2e-16 *** #> s(sx,sy):Year2021            1.965e+00      9  4.966  < 2e-16 *** #> s(sx,sy):Year2022            1.989e+00      9  8.210  < 2e-16 *** #> s(sx,sy):Year2023            1.994e+00      9  7.752  < 2e-16 *** #> s(BOTTOM_DEPTH)              5.273e+00      9 17.580  < 2e-16 *** #> s(log(GEAR_TEMPERATURE + 3)) 5.389e+00      9 13.018  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> R-sq.(adj) =  0.491   Deviance explained = 85.9% #> -ML =  18112  Scale est. = 16.749    n = 2984"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/D-simple-case-study.html","id":"indicies-of-abundance","dir":"Articles","previous_headings":"","what":"8. Indicies of Abundance","title":"{sdmgamindex} case study with and without covariates","text":"","code":"# dat_design <- dplyr::bind_rows( #   read.csv(file = system.file(\"YFS_10210_estimate_summary.csv\", #                               package = \"sdmgamindex\" )) %>% #     dplyr::mutate(common_name = \"yellowfin sole\"), #   read.csv(file = system.file(\"WEP_21740_estimate_summary.csv\", #                               package = \"sdmgamindex\" ))  %>% #     dplyr::mutate(common_name = \"walleye pollock\"), #   read.csv(file = system.file(\"RKC_Table_for_SS3.csv\", #                               package = \"sdmgamindex\" )) %>% #     dplyr::rename(design_mt = Estimate_metric_tons, #                   design_se = SD_mt) %>% #     dplyr::mutate(design_se = (design_se)^2, #                   design_CV = NA, #                   VAST_mt = NA, #                   VAST_se = NA, #                   VAST_CV = NA, #                   common_name = \"red king crab\") %>% #     dplyr::select(-Unit, -Fleet, -SD_log))  dat_design <- dplyr::bind_rows(   sdmgamindex::noaa_afsc_biomass_estimates %>%     dplyr::filter(survey_definition_id == 98 &                     year %in% YEARS &                     species_code %in% c(21740, 10210))  %>%     dplyr::mutate(common_name = dplyr::case_when(       species_code == 21740 ~ \"walleye pollock\",       species_code == 10210 ~ \"yellowfin sole\")) %>%     dplyr::select(Year = year, Estimate_metric_tons = biomass_mt, SD_mt = biomass_var, common_name) ,   read.csv(file = system.file(\"RKC_Table_for_SS3.csv\",                               package = \"sdmgamindex\" )) %>%     dplyr::mutate(common_name = \"red king crab\") %>%     dplyr::select(-Unit, -Fleet, -SD_log)) %>%   dplyr::rename(design_mt = Estimate_metric_tons,                 design_se = SD_mt) %>%   dplyr::mutate(design_se = (design_se)^2,                 design_CV = NA,                 VAST_mt = NA,                 VAST_se = NA,                 VAST_CV = NA)  dat <- data.frame() for (i in 1:length(models)){   temp <- models[[i]]   dat0 <- data.frame(idx = temp$idx[,1]/1e2, # clearly having an issue with units                      lo = temp$lo[,1]/1e2,                       up = temp$up[,1]/1e2,                      Year = rownames(temp$idx),                       group = names(models)[i],                      formula = paste0(\"cpue_kgkm2 ~ \",                                        as.character(temp$pModels[[1]]$formula)[[3]]))      dat <- dplyr::bind_rows(dat, dat0)  }  dat$common_name <- paste0(sapply(X = strsplit(x = dat$group, split = \" fm\"), `[`, 1))  dat <- dplyr::bind_rows(dat %>%                            dplyr::mutate(Year = as.numeric(Year)) %>%                            dplyr::select(-group),                          dat_design %>%                            dplyr::select(design_mt, common_name, Year) %>%                           dplyr::rename(idx = design_mt) %>%                           dplyr::mutate(lo = NA,                                          up = NA,                                          formula = \"design\")) %>%    dplyr::filter(Year %in% YEARS[-1])  dat[dat$Year == 2020, c(\"idx\", \"up\", \"lo\")] <- NA  ggplot2::ggplot(data = dat,                 mapping = aes(x = Year,                                y = idx,                                group = formula,                                color = formula)) +   ggplot2::geom_line(size = 1.5) +    ggplot2::geom_point(size = 2)  +    ggplot2::geom_ribbon(aes(ymin = lo, ymax = up, fill = formula),                         alpha=0.1,                         linetype=\"dashed\",                        color=\"grey\") +    ggplot2::ggtitle(\"Annual Index Model Results\") +   ggplot2::scale_y_continuous(name = \"Index\", labels = scales::comma) +   ggplot2::facet_wrap(vars(common_name), scales = \"free\", ncol = 1) +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"bottom\",                   legend.direction = \"vertical\")"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/D-simple-case-study.html","id":"predict-and-plot","dir":"Articles","previous_headings":"","what":"9. Predict and plot","title":"{sdmgamindex} case study with and without covariates","text":"","code":"dat_pred <- dat_catch_haul %>%   dplyr::select(Year, sx, sy, Lon, Lat, GEAR_TEMPERATURE, BOTTOM_DEPTH)  dat <- data.frame() for (i in 1:length(models)) {   temp <- models[[i]]   dat0 <- data.frame(idx =                         predict.gam(                          object = temp$pModels[[1]],                          newdata = dat_pred),                        group = names(models)[i],                       formula = paste0(\"cpue_kgkm2 ~ \",                                        as.character(temp$pModels[[1]]$formula)[[3]])   )   dat00 <- dplyr::bind_cols(dat0, dat_pred)    dat <- dplyr::bind_rows(dat, dat00)     }  dat$facet_group <- paste0(sapply(X = strsplit(x = dat$group, split = \" fm\"), `[`, 1))  for (i in 1:length(unique(dat$facet_group))){   ggplot2::ggplot(data = dat %>%                      dplyr::filter(facet_group == unique(dat$facet_group)[i]),                    mapping = aes(x = Lon,                                  y = Lat,                                  group = group,                                  color = idx)) +     scale_color_viridis_c(option = \"D\") +     geom_point()  +      ggtitle(paste0(\"Annual Index Model Results for \", unique(dat$facet_group)[i])) +     facet_grid(cols = vars(group),                 rows = vars(Year)) +     theme_bw() } # sdmgamindex::plot_surveyidx( #   x = models,  #   dat = ds,  #   myids = NULL,  #   predD = allpd)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/articles/D-simple-case-study.html","id":"simulations","dir":"Articles","previous_headings":"","what":"10. Simulations","title":"{sdmgamindex} case study with and without covariates","text":"","code":"REPS <- 4 ests <- list()  for(i in 1:nrow(comb)){      cat(\"Simulating \",comb$SPECIES[i],\"\\n\", comb$fm_name[i], \": \", comb$fm[i], \"\\n\")   temp <- paste0(comb$SPECIES[i], \" \", comb$fm_name[i])      # for(SPECIES in specLevels){   ests[[ temp ]] <- list()      ## simulate data   csim <- sdmgamindex::get_surveyidx_sim(models[[i]], ds[[comb$SPECIES[i]]])   sims <-lapply(1:REPS,function(j) sdmgamindex::get_surveyidx_sim(     model = models[[i]],     d = ds[[comb$SPECIES[i]]],      sampleFit = FALSE,     condSim = csim) )      ## re-estimate   tmp <- ds[[i]]   for(ii in 1:REPS) {     tmp[[2]]$Nage <- matrix(sims[[ii]][[1]][,1],ncol=1)     colnames(tmp$Nage)<-1          ests[[SPECIES]][[ii]]  <-       sdmgamindex::get_surveyidx(         x = tmp,         ages = 1,         myids=NULL,         predD=allpd,         cutOff=0,         fam=\"Tweedie\",         modelP=fm,         gamma=1,         control=list(trace=TRUE,maxit=10))   } }  sims ests  png(filename = here::here(\"inst\",\"simest.png\"),     width=640*pngscal,height=480) # par(mfrow=c(2,2)) save(sims, ests, file = here::here(\"inst\",\"vigD_model_fits.Rdata\")) for(i in 1:nrow(comb)){   sdmgamindex::plot_simulation_list(     x = ests[[temp]],     base=models[[temp]],     main=temp,     lwd=2) } dev.off()"},{"path":[]},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emily Markowitz. Author, maintainer. Margaret Siple. Author. Casper Berg. Author.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Markowitz E, Siple M, Berg C (2024). sdmgamindex: Calculate survey indices abundance DATRAS exchange data. R package version 0.1.1, https://emilymarkowitz-noaa.github.io/sdmgamindex/.","code":"@Manual{,   title = {sdmgamindex: Calculate survey indices of abundance from DATRAS exchange data},   author = {Emily Markowitz and Margaret Siple and Casper Berg},   year = {2024},   note = {R package version 0.1.1},   url = {https://emilymarkowitz-noaa.github.io/sdmgamindex/}, }"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/index.html","id":"sdmgamindex-","dir":"","previous_headings":"","what":"Calculate survey indices of abundance from DATRAS exchange data","title":"Calculate survey indices of abundance from DATRAS exchange data","text":"repository previously forked casperwberg/surveyIndex previously named emilymarkowitz-noaa/surveyIndex. R package calculating survey indices age DATRAS exchange data.  code always development. Find code used various reports code releases.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/index.html","id":"code-has-been-modified-and-adapted-by","dir":"","previous_headings":"","what":"Code has been modified and adapted by:","title":"Calculate survey indices of abundance from DATRAS exchange data","text":"Emily Markowitz (Emily.Markowitz noaa.gov; @EmilyMarkowitz-NOAA) Margaret Siple (Margaret.Siple noaa.gov; @MargaretSiple-noaa) Alaska Fisheries Science Center National Marine Fisheries Service National Oceanic Atmospheric Administration Seattle, WA 98195","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/index.html","id":"code-was-originally-developed-by","dir":"","previous_headings":"","what":"Code was originally developed by:","title":"Calculate survey indices of abundance from DATRAS exchange data","text":"Casper W. Berg (https://orbit.dtu.dk/en/persons/casper-willestofte-berg; @casperwberg) National Institute Aquatic Resources, Technical University Denmark Based work published : Berg et al. (2014) Repository: remotes::install_github(\"casperwberg/surveyIndex/surveyIndex\")","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate survey indices of abundance from DATRAS exchange data","text":"install need DATRAS package","code":"library(remotes) remotes::install_github(\"DTUAqua/DATRAS/DATRAS\") # remotes::install_github(\"casperwberg/sdmgamindex/sdmgamindex\") remotes::install_github(\"emilymarkowitz-noaa/sdmgamindex\")"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Calculate survey indices of abundance from DATRAS exchange data","text":"See examples pkgdown site ?get_surveyidx() documentation.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/index.html","id":"metadata","dir":"","previous_headings":"","what":"Metadata","title":"Calculate survey indices of abundance from DATRAS exchange data","text":"package last produced using:","code":"## R version 4.3.1 (2023-06-16 ucrt) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 19045) ##  ## Matrix products: default ##  ##  ## locale: ## [1] LC_COLLATE=English_United States.utf8  LC_CTYPE=English_United States.utf8    LC_MONETARY=English_United States.utf8 LC_NUMERIC=C                           LC_TIME=English_United States.utf8     ##  ## time zone: America/Los_Angeles ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] knitr_1.45    badger_0.2.3  pkgdown_2.0.7 usethis_2.2.2 here_1.0.1    sp_2.1-2      ##  ## loaded via a namespace (and not attached): ##  [1] yulab.utils_0.1.3   rappdirs_0.3.3      utf8_1.2.4          generics_0.1.3      lattice_0.22-5      digest_0.6.34       magrittr_2.0.3      evaluate_0.23       grid_4.3.1          RColorBrewer_1.1-3  ## [11] fastmap_1.1.1       rprojroot_2.0.4     jsonlite_1.8.8      Matrix_1.6-5        BiocManager_1.30.22 mgcv_1.9-1          purrr_1.0.2         fansi_1.0.6         scales_1.3.0        httr2_1.0.0         ## [21] cli_3.6.2           rlang_1.1.3         crayon_1.5.2        gitcreds_0.1.2      munsell_0.5.0       splines_4.3.1       cachem_1.0.8        yaml_2.3.8          tools_4.3.1         memoise_2.0.1       ## [31] dplyr_1.1.4         colorspace_2.1-0    ggplot2_3.4.4       credentials_2.0.1   curl_5.2.0          vctrs_0.6.5         R6_2.5.1            lifecycle_1.0.4     fs_1.6.3            pkgconfig_2.0.3     ## [41] pillar_1.9.0        gtable_0.3.4        gh_1.4.0            glue_1.7.0          gert_2.0.1          xfun_0.41           tibble_3.2.1        rvcheck_0.2.1       tidyselect_1.2.0    rstudioapi_0.15.0   ## [51] sys_3.4.2           htmltools_0.5.7     nlme_3.1-164        rmarkdown_2.25      dlstats_0.1.7       compiler_4.3.1      askpass_1.2.0       openssl_2.1.1"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/index.html","id":"noaa-readme","dir":"","previous_headings":"","what":"NOAA README","title":"Calculate survey indices of abundance from DATRAS exchange data","text":"repository scientific product official communication National Oceanic Atmospheric Administration, United States Department Commerce. NOAA GitHub project code provided ‘’ basis user assumes responsibility use. claims Department Commerce Department Commerce bureaus stemming use GitHub project governed applicable Federal law. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring Department Commerce. Department Commerce seal logo, seal logo DOC bureau, shall used manner imply endorsement commercial product activity DOC United States Government.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/index.html","id":"noaa-license","dir":"","previous_headings":"","what":"NOAA License","title":"Calculate survey indices of abundance from DATRAS exchange data","text":"Software code created U.S. Government employees subject copyright United States (17 U.S.C. §105). United States/Department Commerce reserve rights seek obtain copyright protection countries United States Software authored entirety Department Commerce. end, Department Commerce hereby grants Recipient royalty-free, nonexclusive license use, copy, create derivative works Software outside United States.  U.S. Department Commerce | National Oceanographic Atmospheric Administration | NOAA Fisheries","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/anova_likelihood_ratio_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Likelihood ratio test for comparing two survey indices. — anova_likelihood_ratio_test","title":"Likelihood ratio test for comparing two survey indices. — anova_likelihood_ratio_test","text":"Previously called anova_SI. TOLDEO.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/anova_likelihood_ratio_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood ratio test for comparing two survey indices. — anova_likelihood_ratio_test","text":"","code":"anova_likelihood_ratio_test(m1, m2)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/anova_likelihood_ratio_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likelihood ratio test for comparing two survey indices. — anova_likelihood_ratio_test","text":"m1 model 1 m2 model 2","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/anova_likelihood_ratio_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likelihood ratio test for comparing two survey indices. — anova_likelihood_ratio_test","text":"p-value.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/anova_likelihood_ratio_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Likelihood ratio test for comparing two survey indices. — anova_likelihood_ratio_test","text":"","code":"# Simple example dat <- datasets::airquality m1 <- mgcv::gam(Ozone ~ s(Solar.R), data = dat) m1 #>  #> Family: gaussian  #> Link function: identity  #>  #> Formula: #> Ozone ~ s(Solar.R) #>  #> Estimated degrees of freedom: #> 3.04  total = 4.04  #>  #> GCV score: 892.2281      m2 <- mgcv::gam(Ozone ~ Wind + s(Solar.R), data = dat) m2 #>  #> Family: gaussian  #> Link function: identity  #>  #> Formula: #> Ozone ~ Wind + s(Solar.R) #>  #> Estimated degrees of freedom: #> 2.77  total = 4.77  #>  #> GCV score: 614.5392      # anova_likelihood_ratio_test(m1 = m1, m2 = m2)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/calc_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Get distance (km) between two locations\r\npreviously called gcd.hf — calc_distance","title":"Get distance (km) between two locations\r\npreviously called gcd.hf — calc_distance","text":"Get distance (km) two locations previously called gcd.hf","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/calc_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get distance (km) between two locations\r\npreviously called gcd.hf — calc_distance","text":"","code":"calc_distance(long1, lat1, long2, lat2)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/calc_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get distance (km) between two locations\r\npreviously called gcd.hf — calc_distance","text":"long1 Numeric Decimal degrees. Longitude first location. lat1 Numeric Decimal degrees. Latitude first location. long2 Numeric Decimal degrees. Longitude second location. lat2 Numeric Decimal degrees. Latitude second location.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/calc_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get distance (km) between two locations\r\npreviously called gcd.hf — calc_distance","text":"Distance locations km.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/calc_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get distance (km) between two locations\r\npreviously called gcd.hf — calc_distance","text":"","code":"calc_distance(long1 = 170, lat1 = 62, long2 = 170.1, lat2 = 62.1) #> [1] 780.7205 calc_distance(long1 = -170, lat1 = -62, long2 = -170.1, lat2 = -62.1) #> [1] 780.7205 calc_distance(long1 = 170, lat1 = -62, long2 = 170.1, lat2 = -62.1) #> [1] 780.7205 calc_distance(long1 = 50, lat1 = 50, long2 = 50.1, lat2 = 50.1) #> [1] 890.4222"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/concentration_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Concentration transform — concentration_transform","title":"Concentration transform — concentration_transform","text":"Previously called concTransform. Helper function plotting survey indices. analysis makes easier transform X values concentrations. common transform X values logarithms, required fitting models data. Since logarithm zero undefined, enter X=0 value empty (missing) transformation. analysis  lets substitute value (tiny concentration) zero taking logarithm.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/concentration_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concentration transform — concentration_transform","text":"","code":"concentration_transform(x)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/concentration_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concentration transform — concentration_transform","text":"x vector log-responses","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/concentration_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concentration transform — concentration_transform","text":"vector transformed responses","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/concentration_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concentration transform — concentration_transform","text":"","code":"plot(concentration_transform(x = seq(1,100,5)))  plot(concentration_transform(x = stats::rnorm(n = 123, mean = 5, sd = 25)))"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/consistency_external.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate external consistencies between two survey indices. — consistency_external","title":"Calculate external consistencies between two survey indices. — consistency_external","text":"Calculate external consistencies two survey indices.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/consistency_external.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate external consistencies between two survey indices. — consistency_external","text":"","code":"consistency_external(tt, tt2, print_plot = FALSE)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/consistency_external.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate external consistencies between two survey indices. — consistency_external","text":"tt matrix survey indices (rows=years, cols=ages) tt2 matrix survey indices (rows=years, cols=ages) print_plot plot ?","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/consistency_external.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate external consistencies between two survey indices. — consistency_external","text":"vector correlations (consistencies)","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/consistency_external.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate external consistencies between two survey indices. — consistency_external","text":"Previously called externalCons. Proper alignment years ages must ensured user.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/consistency_internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate internal consistency of a survey index. — consistency_internal","title":"Calculate internal consistency of a survey index. — consistency_internal","text":"Calculate internal consistency survey index.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/consistency_internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate internal consistency of a survey index. — consistency_internal","text":"","code":"consistency_internal(tt, print_plot = FALSE)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/consistency_internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate internal consistency of a survey index. — consistency_internal","text":"tt matrix survey indices (rows=years, cols=ages) print_plot Plot ?","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/consistency_internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate internal consistency of a survey index. — consistency_internal","text":"vector consistencies","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/consistency_internal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate internal consistency of a survey index. — consistency_internal","text":"Previously called internalCons.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/convert_crs.html","id":null,"dir":"Reference","previous_headings":"","what":"Change CRS of coordinates — convert_crs","title":"Change CRS of coordinates — convert_crs","text":"Change CRS coordinates","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/convert_crs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change CRS of coordinates — convert_crs","text":"","code":"convert_crs(x, y, crs_in = \"+proj=longlat +datum=WGS84\", crs_out = \"EPSG:3338\")"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/convert_crs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change CRS of coordinates — convert_crs","text":"x Decimal degrees longititude. y Decimal degrees latitude. crs_in Default = \"+proj=longlat +datum=WGS84\". crs_out Default = \"EPSG:3338\".","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/convert_crs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change CRS of coordinates — convert_crs","text":"data.frame 3 columns: ID, Longitude, Latitude","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/convert_crs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change CRS of coordinates — convert_crs","text":"","code":"convert_crs(x = 170, y = 62) #>   ID        X       Y #> 1  1 -1789232 1833161 dat <- sdmgamindex::noaa_afsc_public_foss[,c(\"longitude_dd_start\", \"latitude_dd_start\")] head(dat) #>   longitude_dd_start latitude_dd_start #> 1          -174.4650          62.00251 #> 2          -172.5685          56.69276 #> 3          -172.6630          57.01265 #> 4          -173.2584          57.00871 #> 5          -173.3206          57.34430 #> 6          -172.8151          57.36180 ll <- sdmgamindex::convert_crs( # project data    x = dat$longitude_dd_start,    y = dat$latitude_dd_start,    crs_in = \"+proj=longlat +datum=WGS84\",    crs_out = \"EPSG:3338\") head(ll) #>   ID        X         Y #> 1  1 -1051788 1499607.4 #> 2  2 -1120787  900491.0 #> 3  3 -1116444  936387.2 #> 4  4 -1151196  946129.4 #> 5  5 -1144064  983096.8 #> 6  6 -1114402  976375.5"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/convert_deg_rad.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert decimal degrees to radians\r\nPreviously called deg2rad. — convert_deg_rad","title":"Convert decimal degrees to radians\r\nPreviously called deg2rad. — convert_deg_rad","text":"Convert decimal degrees radians Previously called deg2rad.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/convert_deg_rad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert decimal degrees to radians\r\nPreviously called deg2rad. — convert_deg_rad","text":"","code":"convert_deg_rad(deg)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/convert_deg_rad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert decimal degrees to radians\r\nPreviously called deg2rad. — convert_deg_rad","text":"deg Numeric Decimal degrees latitude longitude.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/convert_deg_rad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert decimal degrees to radians\r\nPreviously called deg2rad. — convert_deg_rad","text":"value degrees radians.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/convert_deg_rad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert decimal degrees to radians\r\nPreviously called deg2rad. — convert_deg_rad","text":"","code":"convert_deg_rad(170.1) #> [1] 2.968805 convert_deg_rad(-60.1) #> [1] -1.048943"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/export_surveyidx.html","id":null,"dir":"Reference","previous_headings":"","what":"Write survey index to file in standard XSA/SAM format — export_surveyidx","title":"Write survey index to file in standard XSA/SAM format — export_surveyidx","text":"Write survey index file standard XSA/SAM format","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/export_surveyidx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write survey index to file in standard XSA/SAM format — export_surveyidx","text":"","code":"export_surveyidx(x, ages, years, toy, file, nam = \"\")"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/export_surveyidx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write survey index to file in standard XSA/SAM format — export_surveyidx","text":"x matrix survey indices ages vector ages years vector years toy fraction year survey conducted (0 1) file filename write nam file description header","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/export_surveyidx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write survey index to file in standard XSA/SAM format — export_surveyidx","text":"nothing","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/export_surveyidx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write survey index to file in standard XSA/SAM format — export_surveyidx","text":"Previously named exportSI.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/fix_age_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to ","title":"Helper function to ","text":"Helper function \"borrow\" missing age groups years","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/fix_age_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to ","text":"","code":"fix_age_group(x, age = 0, n = 3, fun = \"mean\")"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/fix_age_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to ","text":"x DATRASraw object age age impute n least many individuals year fun function 'mean','median','min', 'max'.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/fix_age_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to ","text":"DATRASraw object","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/fix_age_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function to ","text":"years less 'n' individuals age 'age', add fake individuals age 'n'. length individuals set mean (whatever 'fun' specifies) individuals age. minimum maximum age groups fun reasonable replace 'mean' 'min' 'max' respectively. Note, might need call 'addSpectrum' object .","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_bathy_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get bathymetric prediction grid corresponding to the area for a DATRASraw object using the 'marmap' package — get_bathy_grid","title":"Get bathymetric prediction grid corresponding to the area for a DATRASraw object using the 'marmap' package — get_bathy_grid","text":"Get bathymetric prediction grid corresponding area DATRASraw object using 'marmap' package","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_bathy_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get bathymetric prediction grid corresponding to the area for a DATRASraw object using the 'marmap' package — get_bathy_grid","text":"","code":"get_bathy_grid(   d,   minDepth = 10,   maxDepth = Inf,   resolution = 2,   maxDist = Inf,   keep = TRUE,   shapefile = NULL,   select = NULL )"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_bathy_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get bathymetric prediction grid corresponding to the area for a DATRASraw object using the 'marmap' package — get_bathy_grid","text":"d DATRASraw object minDepth Minimum depth include maxDepth Maximum depth include resolution grid resolution (see marmap::getNOAA.bathy) maxDist include grid points farther maxDist nearest observation. keep Save grid disk fast loading next time? shapefile extra shapefile information add (optional) select columns extract shapefile","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_bathy_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get bathymetric prediction grid corresponding to the area for a DATRASraw object using the 'marmap' package — get_bathy_grid","text":"data.frame depths geographical coordinates","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_datrasraw.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame with one row per haul to DATRASraw alike object — get_datrasraw","title":"Data frame with one row per haul to DATRASraw alike object — get_datrasraw","text":"Data frame one row per haul DATRASraw alike object","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_datrasraw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame with one row per haul to DATRASraw alike object — get_datrasraw","text":"","code":"get_datrasraw(x)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_datrasraw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame with one row per haul to DATRASraw alike object — get_datrasraw","text":"x Data.frame. Zero filled catch data.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_datrasraw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame with one row per haul to DATRASraw alike object — get_datrasraw","text":"","code":"dat <- data.frame(           species = 1:2,           Year = 2016:2020,           lon = rnorm(n = 10, mean = 170, sd = 10),           lat = rnorm(n = 10, mean = 170, sd = 10),           sx = rnorm(n = 10, mean = 60, sd = 10),           sy = rnorm(n = 10, mean = 170, sd = 10),           covA = rnorm(n = 10, mean = 3, sd = 10),           covB = rnorm(n = 10, mean = 20, sd = 10),           EFFORT = rnorm(n = 10, mean = 20, sd = 10))  ds <- split(dat,dat$species)  lapply(ds, get_datrasraw) #> $`1` #> [[1]] #> data frame with 0 columns and 0 rows #>  #> [[2]] #>   species Year      lon      lat       sx       sy      covA      covB   EFFORT #> 1       1 2016 174.2657 156.9488 67.66440 164.4198  5.630667 29.608648 35.25939 #> 3       1 2018 170.2229 174.5434 73.21781 176.7768 -4.882588 30.359308 39.93110 #> 5       1 2020 167.3735 167.1310 65.14600 166.4362  6.636526  7.246651 45.64408 #> 7       1 2017 171.9215 170.6730 75.32741 178.0441  8.176691 42.117695 31.42695 #> 9       1 2019 178.4618 161.7269 61.22103 179.3578 -6.740696  8.534761 16.02999 #>   haul.id #> 1       1 #> 3       2 #> 5       3 #> 7       4 #> 9       5 #>  #> [[3]] #> data frame with 0 columns and 0 rows #>  #> attr(,\"class\") #> [1] \"DATRASraw\" #>  #> $`2` #> [[1]] #> data frame with 0 columns and 0 rows #>  #> [[2]] #>    species Year      lon      lat       sx       sy        covA      covB #> 2        2 2017 171.0758 160.5509 69.79957 180.5254 -14.9059186 27.687214 #> 4        2 2019 176.0361 161.4480 48.80289 170.3850  -8.3302167 15.261129 #> 6        2 2016 164.7174 178.9496 44.90900 177.8284   0.1411209 16.943793 #> 8        2 2018 158.5380 168.3732 64.29147 150.9994   1.9709133  9.583316 #> 10       2 2020 170.8172 188.7651 48.61988 166.9095  15.7067230  3.246727 #>      EFFORT haul.id #> 2  25.54186       1 #> 4  18.45879       2 #> 6  30.61999       3 #> 8  31.23839       4 #> 10 11.76739       5 #>  #> [[3]] #> data frame with 0 columns and 0 rows #>  #> attr(,\"class\") #> [1] \"DATRASraw\" #>"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence intervals for a named parameter in a survey index model. — get_effect","title":"Calculate confidence intervals for a named parameter in a survey index model. — get_effect","text":"Calculate confidence intervals named parameter survey index model.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence intervals for a named parameter in a survey index model. — get_effect","text":"","code":"get_effect(x, dat, parName = \"Gear\", cutOff, nboot = 1000, pOnly = FALSE)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence intervals for a named parameter in a survey index model. — get_effect","text":"x survey index dat DATRASraw object parName name parameter, e.g. \"Gear\" cutOff see getsdmgamindex() nboot see getsdmgamindex() pOnly calculate positive part model, defaults FALSE.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence intervals for a named parameter in a survey index model. — get_effect","text":"list estimates + ci bounds age group.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a grid of haul positions from a DATRASraw object. — get_grid","title":"Create a grid of haul positions from a DATRASraw object. — get_grid","text":"Create grid haul positions DATRASraw object.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a grid of haul positions from a DATRASraw object. — get_grid","text":"","code":"get_grid(dd, nLon = 20)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a grid of haul positions from a DATRASraw object. — get_grid","text":"dd DATRASraw object nLon number grid cells longitude direction.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a grid of haul positions from a DATRASraw object. — get_grid","text":"sdmgamindexGrid (list coordinates haul.ids)","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_prediction_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction a grid for a specific year — get_prediction_grid","title":"Prediction a grid for a specific year — get_prediction_grid","text":"Prediction grid specific year","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_prediction_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction a grid for a specific year — get_prediction_grid","text":"","code":"get_prediction_grid(year, x, subsel = NULL, varsbyyr = NULL, vars = NULL)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_prediction_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction a grid for a specific year — get_prediction_grid","text":"year Numeric string. years data available . x Data.frame. data.frame covariate data going model. subsel Default = NULL. varsbyyr Character string. name variables vary year. vars Character string. name variables vary year.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_prediction_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction a grid for a specific year — get_prediction_grid","text":"list data year","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_prediction_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction a grid for a specific year — get_prediction_grid","text":"","code":"dat <- data.frame(           lon = rnorm(n = 10, mean = 170, sd = 10),           lat = rnorm(n = 10, mean = 170, sd = 10),           sx = rnorm(n = 10, mean = 60, sd = 10),           sy = rnorm(n = 10, mean = 170, sd = 10),           covA = rnorm(n = 10, mean = 3, sd = 10),           covB2019 = rnorm(n = 10, mean = 20, sd = 10),           covB2020 = rnorm(n = 10, mean = 20, sd = 10),           covB2021 = rnorm(n = 10, mean = 20, sd = 10),           covB2022 = rnorm(n = 10, mean = 20, sd = 10),           EFFORT = rnorm(n = 10, mean = 20, sd = 10))  vars <- \"covA\" varsbyyr <- \"covB\" YEARS <- 2019:2022 pg <- lapply(YEARS,        FUN = get_prediction_grid,        x = dat,        vars = vars,        varsbyyr = varsbyyr) names(pg) <- YEARS pg #> $`2019` #>         lon      lat       sx       sy       covA      covB EFFORT #> 1  164.2112 167.2785 47.29487 171.2430 -12.625184 32.037678      1 #> 2  187.6379 145.5332 65.42142 160.0157   3.710534  5.687292      1 #> 3  171.3299 170.6549 60.75106 182.3339  -3.395348 33.829109      1 #> 4  173.7650 159.0149 65.58514 173.4042  -5.451957 20.031259      1 #> 5  181.3871 163.6682 64.15406 165.2730   9.752447 19.221132      1 #> 6  182.4126 149.3635 45.47700 177.0875  14.533758 24.414282      1 #> 7  176.1209 196.4893 69.41206 154.7104 -13.865047 21.289229      1 #> 8  165.7062 158.4660 56.61064 172.3743  -6.028149 11.697857      1 #> 9  183.6046 166.5936 59.24426 156.8719  16.176337 14.964071      1 #> 10 169.2914 177.8636 60.40204 177.4703  14.001897  8.063588      1 #>  #> $`2020` #>         lon      lat       sx       sy       covA      covB EFFORT #> 1  164.2112 167.2785 47.29487 171.2430 -12.625184 12.482767      1 #> 2  187.6379 145.5332 65.42142 160.0157   3.710534 34.558414      1 #> 3  171.3299 170.6549 60.75106 182.3339  -3.395348 11.713965      1 #> 4  173.7650 159.0149 65.58514 173.4042  -5.451957 22.897745      1 #> 5  181.3871 163.6682 64.15406 165.2730   9.752447 15.199465      1 #> 6  182.4126 149.3635 45.47700 177.0875  14.533758 13.951706      1 #> 7  176.1209 196.4893 69.41206 154.7104 -13.865047 34.601102      1 #> 8  165.7062 158.4660 56.61064 172.3743  -6.028149 21.496794      1 #> 9  183.6046 166.5936 59.24426 156.8719  16.176337  5.666789      1 #> 10 169.2914 177.8636 60.40204 177.4703  14.001897 19.896967      1 #>  #> $`2021` #>         lon      lat       sx       sy       covA      covB EFFORT #> 1  164.2112 167.2785 47.29487 171.2430 -12.625184 17.877640      1 #> 2  187.6379 145.5332 65.42142 160.0157   3.710534 10.936598      1 #> 3  171.3299 170.6549 60.75106 182.3339  -3.395348 -1.021525      1 #> 4  173.7650 159.0149 65.58514 173.4042  -5.451957 38.933605      1 #> 5  181.3871 163.6682 64.15406 165.2730   9.752447 10.318742      1 #> 6  182.4126 149.3635 45.47700 177.0875  14.533758 18.973970      1 #> 7  176.1209 196.4893 69.41206 154.7104 -13.865047 22.399596      1 #> 8  165.7062 158.4660 56.61064 172.3743  -6.028149 20.608989      1 #> 9  183.6046 166.5936 59.24426 156.8719  16.176337 -1.775760      1 #> 10 169.2914 177.8636 60.40204 177.4703  14.001897 18.821399      1 #>  #> $`2022` #>         lon      lat       sx       sy       covA     covB EFFORT #> 1  164.2112 167.2785 47.29487 171.2430 -12.625184 21.12295      1 #> 2  187.6379 145.5332 65.42142 160.0157   3.710534 20.07886      1 #> 3  171.3299 170.6549 60.75106 182.3339  -3.395348 38.77744      1 #> 4  173.7650 159.0149 65.58514 173.4042  -5.451957 41.58757      1 #> 5  181.3871 163.6682 64.15406 165.2730   9.752447 27.09715      1 #> 6  182.4126 149.3635 45.47700 177.0875  14.533758 27.66983      1 #> 7  176.1209 196.4893 69.41206 154.7104 -13.865047 16.91789      1 #> 8  165.7062 158.4660 56.61064 172.3743  -6.028149 30.12002      1 #> 9  183.6046 166.5936 59.24426 156.8719  16.176337 10.80948      1 #> 10 169.2914 177.8636 60.40204 177.4703  14.001897 25.63380      1 #>"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate survey indices by age. — get_surveyidx","title":"Calculate survey indices by age. — get_surveyidx","text":"Calculate survey indices age.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate survey indices by age. — get_surveyidx","text":"","code":"get_surveyidx(   x,   ages,   myids,   kvecP = rep(12 * 12, length(ages)),   kvecZ = rep(8 * 8, length(ages)),   gamma = 1.4,   cutOff = 1,   fam = \"Gamma\",   useBIC = FALSE,   nBoot = 1000,   mc.cores = 1,   method = \"ML\",   predD = NULL,   modelZ = NULL,   modelP = NULL,   knotsP = NULL,   knotsZ = NULL,   predfix = NULL,   linkZ = \"logit\",   CIlevel = 0.95,   ... )"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate survey indices by age. — get_surveyidx","text":"x DATRASraw object ages vector ages myids haul.ids grid kvecP vector spatial smoother max. basis dimension age group, strictly positive part model kvecZ vector spatial smoother max. basis dimension age group, presence/absence part model (ignored Tweedie models) gamma model degress freedom inflation factor (see 'gamma' argument mgcv::gam() ) cutOff treat observations value zero fam distribution, either \"Gamma\",\"LogNormal\", \"Tweedie\". useBIC use BIC smoothness selection (overrides 'gamma' argument) nBoot number bootstrap samples used calculating index confidence intervals mc.cores number cores parallel processing method smoothness selection method used 'gam' predD optional DATRASraw object data.frame (named list objects, one year names(predD) years) , defaults NULL. null used grid. modelZ vector model formula presence/absence part, one pr. age group (ignored Tweedie models) modelP vector model formula strictly positive responses, one pr. age group knotsP optional list knots gam, strictly positive responses knotsZ optional list knots gam, presence/absence predfix optional named list extra variables (besides Gear, HaulDur, Ship, TimeShotHour),  fixed prediction step (standardized) linkZ link function grDevices::dev.new part model, default: \"logit\" (used Tweedie models). CIlevel Confidence interval level, defaults 0.95. ... Optional extra arguments \"gam\"","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate survey indices by age. — get_surveyidx","text":"survey index (list)","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate survey indices by age. — get_surveyidx","text":"based methods described Berg et al. (2014): \"Evaluation alternative age-based methods estimating relative abundance survey data relation assessment models\", Fisheries Research 151(2014) 91-99.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate survey indices by age. — get_surveyidx","text":"","code":"if (FALSE) { library(DATRAS) # example data library(sdmgamindex) library(tidyverse) dat <- yfs <- sdmgamindex::noaa_afsc_public_foss |>    dplyr::filter(srvy==\"EBS\" & species_code == 10210) # Megsie todo: add example here using EBS data! }"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_aic.html","id":null,"dir":"Reference","previous_headings":"","what":"Akaike Information Criterion (or BIC) for survey index models — get_surveyidx_aic","title":"Akaike Information Criterion (or BIC) for survey index models — get_surveyidx_aic","text":"Akaike Information Criterion (BIC) survey index models","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_aic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Akaike Information Criterion (or BIC) for survey index models — get_surveyidx_aic","text":"","code":"get_surveyidx_aic(x, BIC = FALSE)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_aic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Akaike Information Criterion (or BIC) for survey index models — get_surveyidx_aic","text":"x survey index return get_surveyidx BIC TRUE compute BIC instead AIC","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_aic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Akaike Information Criterion (or BIC) for survey index models — get_surveyidx_aic","text":"numeric value","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_aic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Akaike Information Criterion (or BIC) for survey index models — get_surveyidx_aic","text":"previously named AIC.surveyIdx.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_resid.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomized quantile residuals for class 'sdmgamindex' — get_surveyidx_resid","title":"Randomized quantile residuals for class 'sdmgamindex' — get_surveyidx_resid","text":"Randomized quantile residuals class 'sdmgamindex'","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_resid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomized quantile residuals for class 'sdmgamindex' — get_surveyidx_resid","text":"","code":"get_surveyidx_resid(x, a = 1)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_resid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomized quantile residuals for class 'sdmgamindex' — get_surveyidx_resid","text":"x object type 'sdmgamindex' created 'get_surveyidx' age group","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_resid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomized quantile residuals for class 'sdmgamindex' — get_surveyidx_resid","text":"vector residuals, iid standard normal distributed","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_resid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Randomized quantile residuals for class 'sdmgamindex' — get_surveyidx_resid","text":"Previously named residuals.surveyIdx.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data from a sdmgamindex model (experimental and subject to change) — get_surveyidx_sim","title":"Simulate data from a sdmgamindex model (experimental and subject to change) — get_surveyidx_sim","text":"Simulate data surveyIdx model (experimental subject change)","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data from a sdmgamindex model (experimental and subject to change) — get_surveyidx_sim","text":"","code":"get_surveyidx_sim(model, d, sampleFit = FALSE, condSim = NULL)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data from a sdmgamindex model (experimental and subject to change) — get_surveyidx_sim","text":"model object class 'surveyIdx' d dataset (DATRASraw object) sampleFit Use random sample gaussian approximation distribution estimated parameter vector. Default: FALSE. condSim optional results previous call function. Use want generate many datasets (much faster, since mean predictions re-used).","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data from a sdmgamindex model (experimental and subject to change) — get_surveyidx_sim","text":"list  1) simulated observations noise 2) mean (noise) 3) zero probability.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate data from a sdmgamindex model (experimental and subject to change) — get_surveyidx_sim","text":"Previously named simulate surveyIdx.simulate.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_stratmean.html","id":null,"dir":"Reference","previous_headings":"","what":"Survey index using the stratified mean method using ICES statistical rectangles as strata. — get_surveyidx_stratmean","title":"Survey index using the stratified mean method using ICES statistical rectangles as strata. — get_surveyidx_stratmean","text":"Survey index using stratified mean method using ICES statistical rectangles strata.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_stratmean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survey index using the stratified mean method using ICES statistical rectangles as strata. — get_surveyidx_stratmean","text":"","code":"get_surveyidx_stratmean(x, ageCols, doLog = FALSE)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_stratmean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survey index using the stratified mean method using ICES statistical rectangles as strata. — get_surveyidx_stratmean","text":"x DATRASraw object. Must contain matrix: x[[2]]$Nage. ageCols columns Nage matrix included? doLog log-transform?","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_stratmean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Survey index using the stratified mean method using ICES statistical rectangles as strata. — get_surveyidx_stratmean","text":"matrix survey indices","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/get_surveyidx_stratmean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Survey index using the stratified mean method using ICES statistical rectangles as strata. — get_surveyidx_stratmean","text":"Previously named get_surveyidxStratMean.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/noaa_afsc_biomass_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Biomass Estimates from AKFIN for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_biomass_estimates","title":"Biomass Estimates from AKFIN for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_biomass_estimates","text":"table copy GAP_PRODUCTS.BIOMASS object dependencies. data produced Resource Assessment Conservation Engineering Division (RACE) Groundfish Assessment Program (GAP) Alaska Fisheries Science Center (AFSC). legal restrictions access data. data intended public dissemination shared without explicit written consent data managers owners (NOAA Fisheries). GitHub repository scripts created code can found https://github.com/afsc-gap-products/gap_products. data last updated October 04, 2023. table copy GAP_PRODUCTS.BIOMASS object dependencies. data produced Resource Assessment Conservation Engineering Division (RACE) Groundfish Assessment Program (GAP) Alaska Fisheries Science Center (AFSC). legal restrictions access data. data intended public dissemination shared without explicit written consent data managers owners (NOAA Fisheries). GitHub repository scripts created code can found https://github.com/afsc-gap-products/gap_products. data last updated January 11, 2024.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/noaa_afsc_biomass_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Biomass Estimates from AKFIN for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_biomass_estimates","text":"","code":"data('noaa_afsc_biomass_estimates')  data('noaa_afsc_biomass_estimates')"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/noaa_afsc_biomass_estimates.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Biomass Estimates from AKFIN for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_biomass_estimates","text":"data frame 16 observations following 7 variables. population_count Estimated population. estimated population caught survey species, group, total given survey. population_var Estimated population variance. estimated population variance caught survey species, group, total given survey. species_code Taxon code. species code organism associated 'common_name' 'scientific_name' columns. complete species list, review [code books](https://www.fisheries.noaa.gov/resource/document/groundfish-survey-species-code-manual--data-codes-manual). survey_definition_id Survey ID. number uniquely identifies survey. Name description survey. column 'survey_id' associated 'srvy' 'survey' columns. complete list surveys, review [code books](https://www.fisheries.noaa.gov/resource/document/groundfish-survey-species-code-manual--data-codes-manual). year Survey year. Year observation (survey) collected. biomass_mt Estimated biomass. estimated total biomass. biomass_var Estimated biomass variance. estimated variance associated total biomass. data frame 16 observations following 7 variables. biomass_mt Estimated biomass. estimated total biomass. biomass_var Estimated biomass variance. estimated variance associated total biomass. population_count Estimated population. estimated population caught survey species, group, total given survey. population_var Estimated population variance. estimated population variance caught survey species, group, total given survey. species_code Taxon code. species code organism associated 'common_name' 'scientific_name' columns. complete species list, review [code books](https://www.fisheries.noaa.gov/resource/document/groundfish-survey-species-code-manual--data-codes-manual). survey_definition_id Survey ID. survey definition ID code uniquely identifies survey/survey design. column 'survey_definition_id' associated 'srvy' 'survey' columns. complete list surveys, review [code books](https://www.fisheries.noaa.gov/resource/document/groundfish-survey-species-code-manual--data-codes-manual). year Survey year. Year observation (survey) collected.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/noaa_afsc_biomass_estimates.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Biomass Estimates from AKFIN for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_biomass_estimates","text":"https://github.com/afsc-gap-products/gap_products https://github.com/afsc-gap-products/gap_products","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/noaa_afsc_biomass_estimates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Biomass Estimates from AKFIN for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_biomass_estimates","text":"Resource Assessment Conservation Engineering (RACE) Division Groundfish Assessment Program (GAP) Alaska Fisheries Science Center (AFSC) conducts fisheries-independent bottom trawl surveys assess populations demersal fish crab stocks Alaska. Resource Assessment Conservation Engineering (RACE) Division Groundfish Assessment Program (GAP) Alaska Fisheries Science Center (AFSC) conducts fisheries-independent bottom trawl surveys assess populations demersal fish crab stocks Alaska.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/noaa_afsc_biomass_estimates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Biomass Estimates from AKFIN for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_biomass_estimates","text":"Emily Markowitz (Emily.Markowitz noaa.gov)","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/noaa_afsc_biomass_estimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Biomass Estimates from AKFIN for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_biomass_estimates","text":"","code":"data(noaa_afsc_biomass_estimates) data(noaa_afsc_biomass_estimates)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/noaa_afsc_public_foss.html","id":null,"dir":"Reference","previous_headings":"","what":"Public data from FOSS for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_public_foss","title":"Public data from FOSS for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_public_foss","text":"datasets, FOSS_CATCH, FOSS_CPUE_PRESONLY, FOSS_HAUL, FOSS_SPECIES, full joined HAULJOIN variable, includes zero-filled (presence absence) observations catch-per-unit-effort (CPUE) estimates identified species index stations. tables created Resource Assessment Conservation Engineering Division (RACE) Groundfish Assessment Program (GAP) Alaska Fisheries Science Center (AFSC). legal restrictions access data. data intended public dissemination shared without explicit written consent data managers owners (NOAA Fisheries). GitHub repository scripts created code can found https://github.com/afsc-gap-products/gap_products. information codes used tables, please refer survey code books (https://www.fisheries.noaa.gov/resource/document/groundfish-survey-species-code-manual--data-codes-manual). data last updated January 11, 2024.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/noaa_afsc_public_foss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Public data from FOSS for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_public_foss","text":"","code":"data('noaa_afsc_public_foss')"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/noaa_afsc_public_foss.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Public data from FOSS for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_public_foss","text":"data frame 9000 observations following 37 variables. area_swept_km2 Area swept (km). area net covered net fishing (kilometers squared), defined distance fished times net width. bottom_temperature_c Bottom temperature (degrees celsius). Bottom temperature (tenths degree Celsius); NA indicates removed missing values. common_name Taxon common name. common name marine organism associated 'scientific_name' 'species_code' columns. complete species list, review [code books](https://www.fisheries.noaa.gov/resource/document/groundfish-survey-species-code-manual--data-codes-manual). count Taxon count. Total whole number individuals caught haul samples collected. cpue_kgkm2 Weight CPUE (kg/km2). Catch weight (kilograms) per unit effort (area swept net, units square kilometers). cpue_nokm2 Number CPUE (/km2). Numerical catch per unit effort (area swept net, units square kilometers). cruise Cruise ID. six-digit integer identifying cruise number form: YYYY99 (YYYY = year cruise; 99 = 2-digit number sequential; 01 denotes first cruise vessel made year, 02 second, etc.). cruisejoin Cruise ID. Unique integer ID assigned survey, vessel, year combination. date_time Date time. date (MM/DD/YYYY) time (HH:MM) haul. dates times Alaska time (AKDT) Anchorage, AK, USA (UTC/GMT -8 hours). depth_m Depth (m). Bottom depth (meters). distance_fished_km Distance fished (km). Distance net fished (thousands kilometers). duration_hr Tow duration (decimal hr). elapsed time start end haul (decimal hours). haul Haul number. number uniquely identifies sampling event (haul) within cruise. sequential number, chronological order occurrence. hauljoin Haul ID. unique numeric identifier assigned (vessel, cruise, haul) combination. id_rank Lowest taxonomic rank. Lowest taxonomic rank given species entry. itis ITIS taxonomic serial number. Species code identified Integrated Taxonomic Information System (https://itis.gov/). latitude_dd_end End latitude (decimal degrees). Latitude (one hundred thousandth decimal degree) end haul. latitude_dd_start Start latitude (decimal degrees). Latitude (one hundred thousandth decimal degree) start haul. longitude_dd_end End longitude (decimal degrees). Longitude (one hundred thousandth decimal degree) end haul. longitude_dd_start Start longitude (decimal degrees). Longitude (one hundred thousandth decimal degree) start haul. net_height_m Net height (m). Measured estimated distance (meters) footrope headrope trawl. net_width_m Net width (m). Measured estimated distance (meters) wingtips trawl. performance Haul performance code. denotes , , issues arose haul. information, review [code books](https://www.fisheries.noaa.gov/resource/document/groundfish-survey-species-code-manual--data-codes-manual). scientific_name Taxon scientific name. scientific name organism associated 'common_name' 'species_code' columns. complete taxon list, review [code books](https://www.fisheries.noaa.gov/resource/document/groundfish-survey-species-code-manual--data-codes-manual). species_code Taxon code. species code organism associated 'common_name' 'scientific_name' columns. complete species list, review [code books](https://www.fisheries.noaa.gov/resource/document/groundfish-survey-species-code-manual--data-codes-manual). srvy Survey. Abbreviated survey names. column 'srvy' associated 'survey' 'survey_definition_id' columns. Northern Bering Sea (NBS), Southeastern Bering Sea (EBS), Bering Sea Slope (BSS), Gulf Alaska (GOA), Aleutian Islands (AI). station Station ID. Alpha-numeric designation station established design survey. stratum Stratum ID. RACE database statistical area analyzing data. Strata designed using bathymetry geographic habitat-related elements. strata unique survey region. Stratum value 0 indicates experimental tows. surface_temperature_c Surface temperature (Degrees Celsius). Surface temperature (tenths degree Celsius); NA indicates removed missing values. survey Survey Name. Name description survey. column 'survey' associated 'srvy' 'survey_definition_id' columns. survey_definition_id Survey ID. survey definition ID code uniquely identifies survey/survey design. column 'survey_definition_id' associated 'srvy' 'survey' columns. complete list surveys, review [code books](https://www.fisheries.noaa.gov/resource/document/groundfish-survey-species-code-manual--data-codes-manual). taxon_confidence Taxon confidence rating. Confidence ability survey team correctly identify taxon specified level, based solely identification skill (e.g., likelihood taxon caught station location--location basis). Quality codes follow: **'High'**: High confidence consistency. Taxonomy stable reliable level, field identification characteristics well known reliable. **'Moderate'**: Moderate confidence. Taxonomy may questionable level, field identification characteristics may variable difficult assess consistently. **'Low'**: Low confidence. Taxonomy incompletely known, reliable field identification characteristics unknown. Documentation: [Species identification confidence eastern Bering Sea shelf survey (1982-2008)](http://apps-afsc.fisheries.noaa.gov/Publications/ProcRpt/PR2009-04.pdf), [Species identification confidence eastern Bering Sea slope survey (1976-2010)](http://apps-afsc.fisheries.noaa.gov/Publications/ProcRpt/PR2014-05.pdf), [Species identification confidence Gulf Alaska Aleutian Islands surveys (1980-2011)](http://apps-afsc.fisheries.noaa.gov/Publications/ProcRpt/PR2014-01.pdf). vessel_id Vessel ID. ID number vessel used collect data haul. column 'vessel_id' associated 'vessel_name' column. Note possible vessel new name vessel id number. complete list vessel ID codes, review [code books](https://www.fisheries.noaa.gov/resource/document/groundfish-survey-species-code-manual--data-codes-manual). vessel_name Vessel name. Name vessel used collect data haul. column 'vessel_name' associated 'vessel_id' column. Note possible vessel new name vessel id number. complete list vessel ID codes, review [code books](https://www.fisheries.noaa.gov/resource/document/groundfish-survey-species-code-manual--data-codes-manual). weight_kg Sample taxon weight (kg). Weight (thousandths kilogram) individuals haul taxon. worms World Register Marine Species Taxonomic Serial Number. Species code identified World Register Marine Species (WoRMS) (https://www.marinespecies.org/). year Survey year. Year observation (survey) collected.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/noaa_afsc_public_foss.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Public data from FOSS for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_public_foss","text":"https://github.com/afsc-gap-products/gap_products","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/noaa_afsc_public_foss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Public data from FOSS for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_public_foss","text":"Resource Assessment Conservation Engineering (RACE) Division Groundfish Assessment Program (GAP) Alaska Fisheries Science Center (AFSC) conducts fisheries-independent bottom trawl surveys assess populations demersal fish crab stocks Alaska.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/noaa_afsc_public_foss.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Public data from FOSS for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_public_foss","text":"Emily Markowitz (Emily.Markowitz noaa.gov)","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/noaa_afsc_public_foss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Public data from FOSS for EBS walleye pollock, yellowfin sole, and red king crab from 2015 to present — noaa_afsc_public_foss","text":"","code":"data(noaa_afsc_public_foss)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/plot_simulation_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot survey index list (e.g. retrospective analysis) — plot_simulation_list","title":"Plot survey index list (e.g. retrospective analysis) — plot_simulation_list","text":"Plot survey index list (e.g. retrospective analysis)","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/plot_simulation_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot survey index list (e.g. retrospective analysis) — plot_simulation_list","text":"","code":"plot_simulation_list(   x,   base = 1,   rescale = FALSE,   lwd = 1.5,   main = NULL,   allCI = FALSE,   includeCI = TRUE,   ylim = NULL )"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/plot_simulation_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot survey index list (e.g. retrospective analysis) — plot_simulation_list","text":"x (named) list \"surveyIdx\" objects example \"retro.surveyIdx\" \"leaveout.surveyIdx\" base Either index x considered \"base run\" (integer), object class \"surveyIdx\". Confidence bounds shown model . rescale indices rescaled mean 1 (set intersecting years)? Default: FALSE lwd line width argument plot main NULL override main plotting default title \"Age group \" allCI show 95% confidence lines indices? Default FALSE. includeCI Show confidence intervals? Default TRUE. ylim Y axis range. NULL (default) determine automatically.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/plot_simulation_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot survey index list (e.g. retrospective analysis) — plot_simulation_list","text":"nothing","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/plot_surveyidx.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize results from a survey index model fitted with get_surveyidx(). — plot_surveyidx","title":"Visualize results from a survey index model fitted with get_surveyidx(). — plot_surveyidx","text":"Visualize results survey index model fitted get_surveyidx().","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/plot_surveyidx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize results from a survey index model fitted with get_surveyidx(). — plot_surveyidx","text":"","code":"plot_surveyidx(   x,   dat,   alt.idx = NULL,   myids,   cols = 1:length(x$pModels),   select = c(\"index\", \"map\", \"residuals\", \"fitVsRes\"),   par = list(mfrow = c(3, 3)),   colors = rev(grDevices::heat.colors(6)),   map.cex = 1,   plotByAge = TRUE,   legend = TRUE,   predD = NULL,   year = NULL,   main = NULL,   legend.signif = 3,   legend.pos = \"topright\",   restoreOldPar = FALSE,   mapBubbles = FALSE,   cutp = NULL,   ... )"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/plot_surveyidx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize results from a survey index model fitted with get_surveyidx(). — plot_surveyidx","text":"x Survey index produced getsdmgamindex() dat DATRASraw object alt.idx optional matrix alternative index myids vector haul ids constitute grid cols age columns consider? select character vector chosen plots. Either one \"index\",\"map\",\"absolutemap\",\"CVmap\",\"residuals\",\"fitVsRes\",\"\"resVsYear\",\"resVsShip\",\"spatialResiduals\", number. Numbers refer smooths order appear formula. par 'par' settings plotting (named list). colors colors spatial effect. map.cex size grid points maps plotByAge boolean (default=TRUE). true, par(par) called age group. legend boolean (default=TRUE). add legends plot? predD DATRASraw object grid (optional). Overrides 'myids' supplied. year numeric scalar vector (default=NULL). 'select' equals 'map' specific year can chosen (meaningful time-varying spatial effects). select equals 'absolutemap' 'CVmap' year must vector. main optional main title (overrides default title) legend.signif Number significant digits map legends legend.pos Position legend (e.g. \"bottomleft\") see ?legend restoreOldPar restore old par() exit? Default=FALSE mapBubbles boolean (default=FALSE) add observation bubbles? cutp optional vector break points color scale maps ... Additional parameters plot()","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/plot_surveyidx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize results from a survey index model fitted with get_surveyidx(). — plot_surveyidx","text":"series production plots","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/plot_surveyidx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize results from a survey index model fitted with get_surveyidx(). — plot_surveyidx","text":"","code":"# plot_surveyidx()"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/plot_surveyidx_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a sdmgamindexGrid — plot_surveyidx_grid","title":"Plot a sdmgamindexGrid — plot_surveyidx_grid","text":"Plot sdmgamindexGrid","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/plot_surveyidx_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a sdmgamindexGrid — plot_surveyidx_grid","text":"","code":"plot_surveyidx_grid(grid, pch = 1, gridCol = \"lightgrey\")"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/plot_surveyidx_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a sdmgamindexGrid — plot_surveyidx_grid","text":"grid sdmgamindexGrid (created \"get_grid\" function) pch Inherited base::plot(). plotting ‘character’, .e., symbol use. gridCol Color grid plot output.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/plot_surveyidx_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a sdmgamindexGrid — plot_surveyidx_grid","text":"nothing","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/plot_surveyidx_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a sdmgamindexGrid — plot_surveyidx_grid","text":"","code":"# TOLEDO"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/pred_grid_ebs.html","id":null,"dir":"Reference","previous_headings":"","what":"EBS Prediction Grid — pred_grid_ebs","title":"EBS Prediction Grid — pred_grid_ebs","text":"EBS Prediction Grid","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/pred_grid_ebs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EBS Prediction Grid — pred_grid_ebs","text":"","code":"data(\"pred_grid_ebs\")"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/pred_grid_ebs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"EBS Prediction Grid — pred_grid_ebs","text":"data frame 36690 observations following 3 variables. lon Numeric; Longitude (one hundred thousandth decimal degree). lat Numeric; Latitude (one hundred thousandth decimal degree). Shape_Area Numeric; area location represents.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/pred_grid_ebs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"EBS Prediction Grid — pred_grid_ebs","text":"https://github.com/James-Thorson-NOAA/VAST","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/pred_grid_ebs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"EBS Prediction Grid — pred_grid_ebs","text":"DETAILS","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/pred_grid_ebs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"EBS Prediction Grid — pred_grid_ebs","text":"Emily Markowitz (emily.markowitz noaa.gov) James Thorson (james.thorson noaa.gov)","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/pred_grid_ebs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EBS Prediction Grid — pred_grid_ebs","text":"","code":"data(pred_grid_ebs)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/qres_tweedie.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomized quantile residuals for Tweedie models — qres_tweedie","title":"Randomized quantile residuals for Tweedie models — qres_tweedie","text":"Randomized quantile residuals Tweedie models","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/qres_tweedie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomized quantile residuals for Tweedie models — qres_tweedie","text":"","code":"qres_tweedie(gam.obj)"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/qres_tweedie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomized quantile residuals for Tweedie models — qres_tweedie","text":"gam.obj gam object (mgcv package)","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/qres_tweedie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomized quantile residuals for Tweedie models — qres_tweedie","text":"vector residuals, iid standard normal distributed","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/qres_tweedie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Randomized quantile residuals for Tweedie models — qres_tweedie","text":"Previously named qres.tweedie.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/redo_surveyidx.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-compute standardized survey indices for an alternative grid from a previous fitted ","title":"Re-compute standardized survey indices for an alternative grid from a previous fitted ","text":"Re-compute standardized survey indices alternative grid previous fitted \"surveyIdx\" model.","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/redo_surveyidx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-compute standardized survey indices for an alternative grid from a previous fitted ","text":"","code":"redo_surveyidx(   x,   model,   predD = NULL,   myids,   nBoot = 1000,   predfix = list(),   mc.cores = 1 )"},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/redo_surveyidx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-compute standardized survey indices for an alternative grid from a previous fitted ","text":"x DATRASraw dataset model object class \"surveyIdx\" created \"get_surveyidx\" predD optional DATRASraw object, defaults NULL. null used grid. myids haul.ids grid nBoot number bootstrap samples used calculating index confidence intervals predfix optional named list extra variables (besides Gear, HaulDur, Ship, TimeShotHour),  fixed prediction step (standardized) mc.cores mc.cores number cores parallel processing","code":""},{"path":"https://emilymarkowitz-noaa.github.io/sdmgamindex/reference/redo_surveyidx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-compute standardized survey indices for an alternative grid from a previous fitted ","text":"object class \"surveyIdx\"","code":""}]
